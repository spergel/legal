# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _EventStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.EventStatus']]


class _EventStatusListFilterHasInput(TypedDict):
    has: 'enums.EventStatus'


class _EventStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.EventStatus']


class _EventStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.EventStatus']


class _EventStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


EventStatusListFilter = Union[
    _EventStatusListFilterHasInput,
    _EventStatusListFilterEqualsInput,
    _EventStatusListFilterHasSomeInput,
    _EventStatusListFilterIsEmptyInput,
    _EventStatusListFilterHasEveryInput,
]


class _EventStatusListUpdateSet(TypedDict):
    set: List['enums.EventStatus']


class _EventStatusListUpdatePush(TypedDict):
    push: List['enums.EventStatus']


EventStatusListUpdate = Union[
    List['enums.EventStatus'],
    _EventStatusListUpdateSet,
    _EventStatusListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    role: _str
    accounts: 'AccountCreateManyNestedWithoutRelationsInput'
    sessions: 'SessionCreateManyNestedWithoutRelationsInput'
    starredEvents: 'UserEventCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    role: _str


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    role: _str
    accounts: 'AccountUpdateManyWithoutRelationsInput'
    sessions: 'SessionUpdateManyWithoutRelationsInput'
    starredEvents: 'UserEventUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    role: _str


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_emailVerified_OrderByInput = TypedDict(
    '_User_emailVerified_OrderByInput',
    {
        'emailVerified': 'SortOrder',
    },
    total=True
)

_User_image_OrderByInput = TypedDict(
    '_User_image_OrderByInput',
    {
        'image': 'SortOrder',
    },
    total=True
)

_User_role_OrderByInput = TypedDict(
    '_User_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_name_OrderByInput',
    '_User_email_OrderByInput',
    '_User_emailVerified_OrderByInput',
    '_User_image_OrderByInput',
    '_User_role_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    accounts: Union[bool, 'FindManyAccountArgsFromUser']
    sessions: Union[bool, 'FindManySessionArgsFromUser']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive1']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive2']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive3']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive4']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class AccountIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class AccountIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class AccountIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class AccountIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AccountArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAccountArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class SessionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class SessionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class SessionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class SessionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class SessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManySessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class VerificationTokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyVerificationTokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class EventIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    location: Union[bool, 'LocationArgsFromUserRecursive1']
    community: Union[bool, 'CommunityArgsFromUserRecursive1']
    starredBy: Union[bool, 'FindManyUserEventArgsFromUserRecursive1']


class EventIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    location: Union[bool, 'LocationArgsFromUserRecursive2']
    community: Union[bool, 'CommunityArgsFromUserRecursive2']
    starredBy: Union[bool, 'FindManyUserEventArgsFromUserRecursive2']


class EventIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    location: Union[bool, 'LocationArgsFromUserRecursive3']
    community: Union[bool, 'CommunityArgsFromUserRecursive3']
    starredBy: Union[bool, 'FindManyUserEventArgsFromUserRecursive3']


class EventIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    location: Union[bool, 'LocationArgsFromUserRecursive4']
    community: Union[bool, 'CommunityArgsFromUserRecursive4']
    starredBy: Union[bool, 'FindManyUserEventArgsFromUserRecursive4']


class EventIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class EventArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyEventArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class LocationIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    events: Union[bool, 'FindManyEventArgsFromUserRecursive1']


class LocationIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    events: Union[bool, 'FindManyEventArgsFromUserRecursive2']


class LocationIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    events: Union[bool, 'FindManyEventArgsFromUserRecursive3']


class LocationIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    events: Union[bool, 'FindManyEventArgsFromUserRecursive4']


class LocationIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class LocationArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'LocationIncludeFromLocationRecursive1'


class LocationArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'LocationIncludeFromLocationRecursive2'


class LocationArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'LocationIncludeFromLocationRecursive3'


class LocationArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'LocationIncludeFromLocationRecursive4'


class LocationArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyLocationArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive1'


class FindManyLocationArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive2'


class FindManyLocationArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive3'


class FindManyLocationArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive4'


class FindManyLocationArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    
    

class CommunityIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    events: Union[bool, 'FindManyEventArgsFromUserRecursive1']


class CommunityIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    events: Union[bool, 'FindManyEventArgsFromUserRecursive2']


class CommunityIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    events: Union[bool, 'FindManyEventArgsFromUserRecursive3']


class CommunityIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    events: Union[bool, 'FindManyEventArgsFromUserRecursive4']


class CommunityIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CommunityArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CommunityIncludeFromCommunityRecursive1'


class CommunityArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CommunityIncludeFromCommunityRecursive2'


class CommunityArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CommunityIncludeFromCommunityRecursive3'


class CommunityArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CommunityIncludeFromCommunityRecursive4'


class CommunityArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCommunityArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive1'


class FindManyCommunityArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive2'


class FindManyCommunityArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive3'


class FindManyCommunityArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive4'


class FindManyCommunityArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    
    

class UserEventIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    event: Union[bool, 'EventArgsFromUserRecursive1']


class UserEventIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    event: Union[bool, 'EventArgsFromUserRecursive2']


class UserEventIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    event: Union[bool, 'EventArgsFromUserRecursive3']


class UserEventIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    event: Union[bool, 'EventArgsFromUserRecursive4']


class UserEventIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserEventArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserEventIncludeFromUserEventRecursive1'


class UserEventArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserEventIncludeFromUserEventRecursive2'


class UserEventArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserEventIncludeFromUserEventRecursive3'


class UserEventArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserEventIncludeFromUserEventRecursive4'


class UserEventArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserEventArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive1'


class FindManyUserEventArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive2'


class FindManyUserEventArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive3'


class FindManyUserEventArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive4'


class FindManyUserEventArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    starredEvents: 'UserEventListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    starredEvents: 'UserEventListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    starredEvents: 'UserEventListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    starredEvents: 'UserEventListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    role: Union[_str, 'types.StringFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    starredEvents: 'UserEventListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    email: _str
    emailVerified: datetime.datetime
    image: _str
    role: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    name: _str
    email: _str
    emailVerified: datetime.datetime
    image: _str
    role: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    name: bool
    email: bool
    emailVerified: bool
    image: bool
    role: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    name: bool
    email: bool
    emailVerified: bool
    image: bool
    role: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'email': bool,
        'emailVerified': bool,
        'image': bool,
        'role': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'email': int,
        'emailVerified': int,
        'image': int,
        'role': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'name',
    'email',
    'emailVerified',
    'image',
    'role',
    'accounts',
    'sessions',
    'starredEvents',
]
UserScalarFieldKeys = Literal[
    'id',
    'name',
    'email',
    'emailVerified',
    'image',
    'role',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'accounts',
        'sessions',
        'starredEvents',
    ]

# Account types

class AccountOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Account create method"""
    id: _str
    userId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[_int]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]
    user: 'UserCreateNestedWithoutRelationsInput'


class AccountCreateInput(AccountOptionalCreateInput):
    """Required arguments to the Account create method"""
    type: _str
    provider: _str
    providerAccountId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AccountOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Account create method, without relations"""
    id: _str
    userId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[_int]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]


class AccountCreateWithoutRelationsInput(AccountOptionalCreateWithoutRelationsInput):
    """Required arguments to the Account create method, without relations"""
    type: _str
    provider: _str
    providerAccountId: _str

class AccountConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AccountCreateWithoutRelationsInput'
    where: 'AccountWhereUniqueInput'

class AccountCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AccountCreateWithoutRelationsInput'
    connect: 'AccountWhereUniqueInput'
    connect_or_create: 'AccountConnectOrCreateWithoutRelationsInput'


class AccountCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AccountCreateWithoutRelationsInput', List['AccountCreateWithoutRelationsInput']]
    connect: Union['AccountWhereUniqueInput', List['AccountWhereUniqueInput']]
    connect_or_create: Union['AccountConnectOrCreateWithoutRelationsInput', List['AccountConnectOrCreateWithoutRelationsInput']]

_AccountWhereUnique_id_Input = TypedDict(
    '_AccountWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_AccountCompoundprovider_providerAccountIdKeyInner = TypedDict(
    '_AccountCompoundprovider_providerAccountIdKeyInner',
    {
        'provider': '_str',
        'providerAccountId': '_str',
    },
    total=True
)

_AccountCompoundprovider_providerAccountIdKey = TypedDict(
    '_AccountCompoundprovider_providerAccountIdKey',
    {
        'provider_providerAccountId': '_AccountCompoundprovider_providerAccountIdKeyInner',
    },
    total=True
)

AccountWhereUniqueInput = Union[
    '_AccountWhereUnique_id_Input',
    '_AccountCompoundprovider_providerAccountIdKey',
]


class AccountUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[Union[AtomicIntInput, _int]]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]
    user: 'UserUpdateOneWithoutRelationsInput'


class AccountUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[Union[AtomicIntInput, _int]]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]


class AccountUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AccountCreateWithoutRelationsInput']
    connect: List['AccountWhereUniqueInput']
    connect_or_create: List['AccountConnectOrCreateWithoutRelationsInput']
    set: List['AccountWhereUniqueInput']
    disconnect: List['AccountWhereUniqueInput']
    delete: List['AccountWhereUniqueInput']

    # TODO
    # update: List['AccountUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AccountUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AccountScalarWhereInput']
    # upsert: List['AccountUpserteWithWhereUniqueWithoutRelationsInput']


class AccountUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AccountCreateWithoutRelationsInput'
    connect: 'AccountWhereUniqueInput'
    connect_or_create: 'AccountConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AccountUpdateInput'
    # upsert: 'AccountUpsertWithoutRelationsInput'


class AccountUpsertInput(TypedDict):
    create: 'AccountCreateInput'
    update: 'AccountUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Account_id_OrderByInput = TypedDict(
    '_Account_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Account_userId_OrderByInput = TypedDict(
    '_Account_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Account_type_OrderByInput = TypedDict(
    '_Account_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_Account_provider_OrderByInput = TypedDict(
    '_Account_provider_OrderByInput',
    {
        'provider': 'SortOrder',
    },
    total=True
)

_Account_providerAccountId_OrderByInput = TypedDict(
    '_Account_providerAccountId_OrderByInput',
    {
        'providerAccountId': 'SortOrder',
    },
    total=True
)

_Account_refresh_token_OrderByInput = TypedDict(
    '_Account_refresh_token_OrderByInput',
    {
        'refresh_token': 'SortOrder',
    },
    total=True
)

_Account_access_token_OrderByInput = TypedDict(
    '_Account_access_token_OrderByInput',
    {
        'access_token': 'SortOrder',
    },
    total=True
)

_Account_expires_at_OrderByInput = TypedDict(
    '_Account_expires_at_OrderByInput',
    {
        'expires_at': 'SortOrder',
    },
    total=True
)

_Account_token_type_OrderByInput = TypedDict(
    '_Account_token_type_OrderByInput',
    {
        'token_type': 'SortOrder',
    },
    total=True
)

_Account_scope_OrderByInput = TypedDict(
    '_Account_scope_OrderByInput',
    {
        'scope': 'SortOrder',
    },
    total=True
)

_Account_id_token_OrderByInput = TypedDict(
    '_Account_id_token_OrderByInput',
    {
        'id_token': 'SortOrder',
    },
    total=True
)

_Account_session_state_OrderByInput = TypedDict(
    '_Account_session_state_OrderByInput',
    {
        'session_state': 'SortOrder',
    },
    total=True
)

_Account_RelevanceInner = TypedDict(
    '_Account_RelevanceInner',
    {
        'fields': 'List[AccountScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Account_RelevanceOrderByInput = TypedDict(
    '_Account_RelevanceOrderByInput',
    {
        '_relevance': '_Account_RelevanceInner',
    },
    total=True
)

AccountOrderByInput = Union[
    '_Account_id_OrderByInput',
    '_Account_userId_OrderByInput',
    '_Account_type_OrderByInput',
    '_Account_provider_OrderByInput',
    '_Account_providerAccountId_OrderByInput',
    '_Account_refresh_token_OrderByInput',
    '_Account_access_token_OrderByInput',
    '_Account_expires_at_OrderByInput',
    '_Account_token_type_OrderByInput',
    '_Account_scope_OrderByInput',
    '_Account_id_token_OrderByInput',
    '_Account_session_state_OrderByInput',
    '_Account_RelevanceOrderByInput',
]



# recursive Account types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AccountRelationFilter = TypedDict(
    'AccountRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AccountListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AccountInclude(TypedDict, total=False):
    """Account relational arguments"""
    user: Union[bool, 'UserArgsFromAccount']


    

class UserIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive1']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromAccountRecursive1']


class UserIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive2']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromAccountRecursive2']


class UserIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive3']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromAccountRecursive3']


class UserIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive4']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromAccountRecursive4']


class UserIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class UserArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyUserArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class AccountIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class AccountIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class AccountIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class AccountIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class AccountArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyAccountArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class SessionIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class SessionIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class SessionIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class SessionIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class SessionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManySessionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class VerificationTokenArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyVerificationTokenArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class EventIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    location: Union[bool, 'LocationArgsFromAccountRecursive1']
    community: Union[bool, 'CommunityArgsFromAccountRecursive1']
    starredBy: Union[bool, 'FindManyUserEventArgsFromAccountRecursive1']


class EventIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    location: Union[bool, 'LocationArgsFromAccountRecursive2']
    community: Union[bool, 'CommunityArgsFromAccountRecursive2']
    starredBy: Union[bool, 'FindManyUserEventArgsFromAccountRecursive2']


class EventIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    location: Union[bool, 'LocationArgsFromAccountRecursive3']
    community: Union[bool, 'CommunityArgsFromAccountRecursive3']
    starredBy: Union[bool, 'FindManyUserEventArgsFromAccountRecursive3']


class EventIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    location: Union[bool, 'LocationArgsFromAccountRecursive4']
    community: Union[bool, 'CommunityArgsFromAccountRecursive4']
    starredBy: Union[bool, 'FindManyUserEventArgsFromAccountRecursive4']


class EventIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class EventArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyEventArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class LocationIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    events: Union[bool, 'FindManyEventArgsFromAccountRecursive1']


class LocationIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    events: Union[bool, 'FindManyEventArgsFromAccountRecursive2']


class LocationIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    events: Union[bool, 'FindManyEventArgsFromAccountRecursive3']


class LocationIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    events: Union[bool, 'FindManyEventArgsFromAccountRecursive4']


class LocationIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class LocationArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'LocationIncludeFromLocationRecursive1'


class LocationArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'LocationIncludeFromLocationRecursive2'


class LocationArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'LocationIncludeFromLocationRecursive3'


class LocationArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'LocationIncludeFromLocationRecursive4'


class LocationArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyLocationArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive1'


class FindManyLocationArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive2'


class FindManyLocationArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive3'


class FindManyLocationArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive4'


class FindManyLocationArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    
    

class CommunityIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    events: Union[bool, 'FindManyEventArgsFromAccountRecursive1']


class CommunityIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    events: Union[bool, 'FindManyEventArgsFromAccountRecursive2']


class CommunityIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    events: Union[bool, 'FindManyEventArgsFromAccountRecursive3']


class CommunityIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    events: Union[bool, 'FindManyEventArgsFromAccountRecursive4']


class CommunityIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class CommunityArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'CommunityIncludeFromCommunityRecursive1'


class CommunityArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'CommunityIncludeFromCommunityRecursive2'


class CommunityArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'CommunityIncludeFromCommunityRecursive3'


class CommunityArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'CommunityIncludeFromCommunityRecursive4'


class CommunityArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyCommunityArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive1'


class FindManyCommunityArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive2'


class FindManyCommunityArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive3'


class FindManyCommunityArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive4'


class FindManyCommunityArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    
    

class UserEventIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']
    event: Union[bool, 'EventArgsFromAccountRecursive1']


class UserEventIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']
    event: Union[bool, 'EventArgsFromAccountRecursive2']


class UserEventIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']
    event: Union[bool, 'EventArgsFromAccountRecursive3']


class UserEventIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']
    event: Union[bool, 'EventArgsFromAccountRecursive4']


class UserEventIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class UserEventArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserEventIncludeFromUserEventRecursive1'


class UserEventArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserEventIncludeFromUserEventRecursive2'


class UserEventArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserEventIncludeFromUserEventRecursive3'


class UserEventArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserEventIncludeFromUserEventRecursive4'


class UserEventArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyUserEventArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive1'


class FindManyUserEventArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive2'


class FindManyUserEventArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive3'


class FindManyUserEventArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive4'


class FindManyUserEventArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    


FindManyAccountArgs = FindManyAccountArgsFromAccount
FindFirstAccountArgs = FindManyAccountArgsFromAccount


    

class AccountWhereInput(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive1', List['AccountWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive1']
    OR: List['AccountWhereInputRecursive1']
    NOT: List['AccountWhereInputRecursive1']


class AccountWhereInputRecursive1(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive2', List['AccountWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive2']
    OR: List['AccountWhereInputRecursive2']
    NOT: List['AccountWhereInputRecursive2']


class AccountWhereInputRecursive2(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive3', List['AccountWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive3']
    OR: List['AccountWhereInputRecursive3']
    NOT: List['AccountWhereInputRecursive3']


class AccountWhereInputRecursive3(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive4', List['AccountWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive4']
    OR: List['AccountWhereInputRecursive4']
    NOT: List['AccountWhereInputRecursive4']


class AccountWhereInputRecursive4(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'



# aggregate Account types


    

class AccountScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive1']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive1']


class AccountScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive2']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive2']


class AccountScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive3']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive3']


class AccountScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive4']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive4']


class AccountScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']



class AccountGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: _str
    access_token: _str
    expires_at: _int
    token_type: _str
    scope: _str
    id_token: _str
    session_state: _str
    _sum: 'AccountSumAggregateOutput'
    _avg: 'AccountAvgAggregateOutput'
    _min: 'AccountMinAggregateOutput'
    _max: 'AccountMaxAggregateOutput'
    _count: 'AccountCountAggregateOutput'


class AccountAvgAggregateOutput(TypedDict, total=False):
    """Account output for aggregating averages"""
    expires_at: float


class AccountSumAggregateOutput(TypedDict, total=False):
    """Account output for aggregating sums"""
    expires_at: _int


class AccountScalarAggregateOutput(TypedDict, total=False):
    """Account output including scalar fields"""
    id: _str
    userId: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: _str
    access_token: _str
    expires_at: _int
    token_type: _str
    scope: _str
    id_token: _str
    session_state: _str


AccountMinAggregateOutput = AccountScalarAggregateOutput
AccountMaxAggregateOutput = AccountScalarAggregateOutput


class AccountMaxAggregateInput(TypedDict, total=False):
    """Account input for aggregating by max"""
    id: bool
    userId: bool
    type: bool
    provider: bool
    providerAccountId: bool
    refresh_token: bool
    access_token: bool
    expires_at: bool
    token_type: bool
    scope: bool
    id_token: bool
    session_state: bool


class AccountMinAggregateInput(TypedDict, total=False):
    """Account input for aggregating by min"""
    id: bool
    userId: bool
    type: bool
    provider: bool
    providerAccountId: bool
    refresh_token: bool
    access_token: bool
    expires_at: bool
    token_type: bool
    scope: bool
    id_token: bool
    session_state: bool


class AccountNumberAggregateInput(TypedDict, total=False):
    """Account input for aggregating numbers"""
    expires_at: bool


AccountAvgAggregateInput = AccountNumberAggregateInput
AccountSumAggregateInput = AccountNumberAggregateInput


AccountCountAggregateInput = TypedDict(
    'AccountCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'type': bool,
        'provider': bool,
        'providerAccountId': bool,
        'refresh_token': bool,
        'access_token': bool,
        'expires_at': bool,
        'token_type': bool,
        'scope': bool,
        'id_token': bool,
        'session_state': bool,
        '_all': bool,
    },
    total=False,
)

AccountCountAggregateOutput = TypedDict(
    'AccountCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'type': int,
        'provider': int,
        'providerAccountId': int,
        'refresh_token': int,
        'access_token': int,
        'expires_at': int,
        'token_type': int,
        'scope': int,
        'id_token': int,
        'session_state': int,
        '_all': int,
    },
    total=False,
)


AccountKeys = Literal[
    'id',
    'userId',
    'type',
    'provider',
    'providerAccountId',
    'refresh_token',
    'access_token',
    'expires_at',
    'token_type',
    'scope',
    'id_token',
    'session_state',
    'user',
]
AccountScalarFieldKeys = Literal[
    'id',
    'userId',
    'type',
    'provider',
    'providerAccountId',
    'refresh_token',
    'access_token',
    'expires_at',
    'token_type',
    'scope',
    'id_token',
    'session_state',
]
AccountScalarFieldKeysT = TypeVar('AccountScalarFieldKeysT', bound=AccountScalarFieldKeys)

AccountRelationalFieldKeys = Literal[
        'user',
    ]

# Session types

class SessionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Session create method"""
    id: _str
    userId: _str
    user: 'UserCreateNestedWithoutRelationsInput'


class SessionCreateInput(SessionOptionalCreateInput):
    """Required arguments to the Session create method"""
    sessionToken: _str
    expires: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SessionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Session create method, without relations"""
    id: _str
    userId: _str


class SessionCreateWithoutRelationsInput(SessionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Session create method, without relations"""
    sessionToken: _str
    expires: datetime.datetime

class SessionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SessionCreateWithoutRelationsInput'
    where: 'SessionWhereUniqueInput'

class SessionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'
    connect_or_create: 'SessionConnectOrCreateWithoutRelationsInput'


class SessionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SessionCreateWithoutRelationsInput', List['SessionCreateWithoutRelationsInput']]
    connect: Union['SessionWhereUniqueInput', List['SessionWhereUniqueInput']]
    connect_or_create: Union['SessionConnectOrCreateWithoutRelationsInput', List['SessionConnectOrCreateWithoutRelationsInput']]

_SessionWhereUnique_id_Input = TypedDict(
    '_SessionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_SessionWhereUnique_sessionToken_Input = TypedDict(
    '_SessionWhereUnique_sessionToken_Input',
    {
        'sessionToken': '_str',
    },
    total=True
)

SessionWhereUniqueInput = Union[
    '_SessionWhereUnique_id_Input',
    '_SessionWhereUnique_sessionToken_Input',
]


class SessionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    sessionToken: _str
    expires: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'


class SessionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    sessionToken: _str
    expires: datetime.datetime


class SessionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SessionCreateWithoutRelationsInput']
    connect: List['SessionWhereUniqueInput']
    connect_or_create: List['SessionConnectOrCreateWithoutRelationsInput']
    set: List['SessionWhereUniqueInput']
    disconnect: List['SessionWhereUniqueInput']
    delete: List['SessionWhereUniqueInput']

    # TODO
    # update: List['SessionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SessionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SessionScalarWhereInput']
    # upsert: List['SessionUpserteWithWhereUniqueWithoutRelationsInput']


class SessionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'
    connect_or_create: 'SessionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SessionUpdateInput'
    # upsert: 'SessionUpsertWithoutRelationsInput'


class SessionUpsertInput(TypedDict):
    create: 'SessionCreateInput'
    update: 'SessionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Session_id_OrderByInput = TypedDict(
    '_Session_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Session_sessionToken_OrderByInput = TypedDict(
    '_Session_sessionToken_OrderByInput',
    {
        'sessionToken': 'SortOrder',
    },
    total=True
)

_Session_userId_OrderByInput = TypedDict(
    '_Session_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Session_expires_OrderByInput = TypedDict(
    '_Session_expires_OrderByInput',
    {
        'expires': 'SortOrder',
    },
    total=True
)

_Session_RelevanceInner = TypedDict(
    '_Session_RelevanceInner',
    {
        'fields': 'List[SessionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Session_RelevanceOrderByInput = TypedDict(
    '_Session_RelevanceOrderByInput',
    {
        '_relevance': '_Session_RelevanceInner',
    },
    total=True
)

SessionOrderByInput = Union[
    '_Session_id_OrderByInput',
    '_Session_sessionToken_OrderByInput',
    '_Session_userId_OrderByInput',
    '_Session_expires_OrderByInput',
    '_Session_RelevanceOrderByInput',
]



# recursive Session types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SessionRelationFilter = TypedDict(
    'SessionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SessionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SessionInclude(TypedDict, total=False):
    """Session relational arguments"""
    user: Union[bool, 'UserArgsFromSession']


    

class UserIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive1']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromSessionRecursive1']


class UserIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive2']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromSessionRecursive2']


class UserIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive3']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromSessionRecursive3']


class UserIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive4']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromSessionRecursive4']


class UserIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class AccountIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class AccountIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class AccountIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class AccountIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class AccountArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyAccountArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class SessionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class SessionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class SessionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class SessionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class SessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManySessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class VerificationTokenArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyVerificationTokenArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class EventIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    location: Union[bool, 'LocationArgsFromSessionRecursive1']
    community: Union[bool, 'CommunityArgsFromSessionRecursive1']
    starredBy: Union[bool, 'FindManyUserEventArgsFromSessionRecursive1']


class EventIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    location: Union[bool, 'LocationArgsFromSessionRecursive2']
    community: Union[bool, 'CommunityArgsFromSessionRecursive2']
    starredBy: Union[bool, 'FindManyUserEventArgsFromSessionRecursive2']


class EventIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    location: Union[bool, 'LocationArgsFromSessionRecursive3']
    community: Union[bool, 'CommunityArgsFromSessionRecursive3']
    starredBy: Union[bool, 'FindManyUserEventArgsFromSessionRecursive3']


class EventIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    location: Union[bool, 'LocationArgsFromSessionRecursive4']
    community: Union[bool, 'CommunityArgsFromSessionRecursive4']
    starredBy: Union[bool, 'FindManyUserEventArgsFromSessionRecursive4']


class EventIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class EventArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyEventArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class LocationIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    events: Union[bool, 'FindManyEventArgsFromSessionRecursive1']


class LocationIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    events: Union[bool, 'FindManyEventArgsFromSessionRecursive2']


class LocationIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    events: Union[bool, 'FindManyEventArgsFromSessionRecursive3']


class LocationIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    events: Union[bool, 'FindManyEventArgsFromSessionRecursive4']


class LocationIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class LocationArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'LocationIncludeFromLocationRecursive1'


class LocationArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'LocationIncludeFromLocationRecursive2'


class LocationArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'LocationIncludeFromLocationRecursive3'


class LocationArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'LocationIncludeFromLocationRecursive4'


class LocationArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyLocationArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive1'


class FindManyLocationArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive2'


class FindManyLocationArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive3'


class FindManyLocationArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive4'


class FindManyLocationArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    
    

class CommunityIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    events: Union[bool, 'FindManyEventArgsFromSessionRecursive1']


class CommunityIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    events: Union[bool, 'FindManyEventArgsFromSessionRecursive2']


class CommunityIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    events: Union[bool, 'FindManyEventArgsFromSessionRecursive3']


class CommunityIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    events: Union[bool, 'FindManyEventArgsFromSessionRecursive4']


class CommunityIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class CommunityArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CommunityIncludeFromCommunityRecursive1'


class CommunityArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CommunityIncludeFromCommunityRecursive2'


class CommunityArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CommunityIncludeFromCommunityRecursive3'


class CommunityArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CommunityIncludeFromCommunityRecursive4'


class CommunityArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyCommunityArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive1'


class FindManyCommunityArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive2'


class FindManyCommunityArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive3'


class FindManyCommunityArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive4'


class FindManyCommunityArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    
    

class UserEventIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']
    event: Union[bool, 'EventArgsFromSessionRecursive1']


class UserEventIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']
    event: Union[bool, 'EventArgsFromSessionRecursive2']


class UserEventIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']
    event: Union[bool, 'EventArgsFromSessionRecursive3']


class UserEventIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']
    event: Union[bool, 'EventArgsFromSessionRecursive4']


class UserEventIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserEventArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserEventIncludeFromUserEventRecursive1'


class UserEventArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserEventIncludeFromUserEventRecursive2'


class UserEventArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserEventIncludeFromUserEventRecursive3'


class UserEventArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserEventIncludeFromUserEventRecursive4'


class UserEventArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserEventArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive1'


class FindManyUserEventArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive2'


class FindManyUserEventArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive3'


class FindManyUserEventArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive4'


class FindManyUserEventArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    


FindManySessionArgs = FindManySessionArgsFromSession
FindFirstSessionArgs = FindManySessionArgsFromSession


    

class SessionWhereInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive1', List['SessionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive1']
    OR: List['SessionWhereInputRecursive1']
    NOT: List['SessionWhereInputRecursive1']


class SessionWhereInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive2', List['SessionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive2']
    OR: List['SessionWhereInputRecursive2']
    NOT: List['SessionWhereInputRecursive2']


class SessionWhereInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive3', List['SessionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive3']
    OR: List['SessionWhereInputRecursive3']
    NOT: List['SessionWhereInputRecursive3']


class SessionWhereInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive4', List['SessionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive4']
    OR: List['SessionWhereInputRecursive4']
    NOT: List['SessionWhereInputRecursive4']


class SessionWhereInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'



# aggregate Session types


    

class SessionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive1']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive1']


class SessionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive2']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive2']


class SessionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive3']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive3']


class SessionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive4']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive4']


class SessionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class SessionGroupByOutput(TypedDict, total=False):
    id: _str
    sessionToken: _str
    userId: _str
    expires: datetime.datetime
    _sum: 'SessionSumAggregateOutput'
    _avg: 'SessionAvgAggregateOutput'
    _min: 'SessionMinAggregateOutput'
    _max: 'SessionMaxAggregateOutput'
    _count: 'SessionCountAggregateOutput'


class SessionAvgAggregateOutput(TypedDict, total=False):
    """Session output for aggregating averages"""


class SessionSumAggregateOutput(TypedDict, total=False):
    """Session output for aggregating sums"""


class SessionScalarAggregateOutput(TypedDict, total=False):
    """Session output including scalar fields"""
    id: _str
    sessionToken: _str
    userId: _str
    expires: datetime.datetime


SessionMinAggregateOutput = SessionScalarAggregateOutput
SessionMaxAggregateOutput = SessionScalarAggregateOutput


class SessionMaxAggregateInput(TypedDict, total=False):
    """Session input for aggregating by max"""
    id: bool
    sessionToken: bool
    userId: bool
    expires: bool


class SessionMinAggregateInput(TypedDict, total=False):
    """Session input for aggregating by min"""
    id: bool
    sessionToken: bool
    userId: bool
    expires: bool


class SessionNumberAggregateInput(TypedDict, total=False):
    """Session input for aggregating numbers"""


SessionAvgAggregateInput = SessionNumberAggregateInput
SessionSumAggregateInput = SessionNumberAggregateInput


SessionCountAggregateInput = TypedDict(
    'SessionCountAggregateInput',
    {
        'id': bool,
        'sessionToken': bool,
        'userId': bool,
        'expires': bool,
        '_all': bool,
    },
    total=False,
)

SessionCountAggregateOutput = TypedDict(
    'SessionCountAggregateOutput',
    {
        'id': int,
        'sessionToken': int,
        'userId': int,
        'expires': int,
        '_all': int,
    },
    total=False,
)


SessionKeys = Literal[
    'id',
    'sessionToken',
    'userId',
    'expires',
    'user',
]
SessionScalarFieldKeys = Literal[
    'id',
    'sessionToken',
    'userId',
    'expires',
]
SessionScalarFieldKeysT = TypeVar('SessionScalarFieldKeysT', bound=SessionScalarFieldKeys)

SessionRelationalFieldKeys = Literal[
        'user',
    ]

# VerificationToken types

class VerificationTokenOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the VerificationToken create method"""


class VerificationTokenCreateInput(VerificationTokenOptionalCreateInput):
    """Required arguments to the VerificationToken create method"""
    identifier: _str
    token: _str
    expires: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class VerificationTokenOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the VerificationToken create method, without relations"""


class VerificationTokenCreateWithoutRelationsInput(VerificationTokenOptionalCreateWithoutRelationsInput):
    """Required arguments to the VerificationToken create method, without relations"""
    identifier: _str
    token: _str
    expires: datetime.datetime

class VerificationTokenConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'VerificationTokenCreateWithoutRelationsInput'
    where: 'VerificationTokenWhereUniqueInput'

class VerificationTokenCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'VerificationTokenCreateWithoutRelationsInput'
    connect: 'VerificationTokenWhereUniqueInput'
    connect_or_create: 'VerificationTokenConnectOrCreateWithoutRelationsInput'


class VerificationTokenCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['VerificationTokenCreateWithoutRelationsInput', List['VerificationTokenCreateWithoutRelationsInput']]
    connect: Union['VerificationTokenWhereUniqueInput', List['VerificationTokenWhereUniqueInput']]
    connect_or_create: Union['VerificationTokenConnectOrCreateWithoutRelationsInput', List['VerificationTokenConnectOrCreateWithoutRelationsInput']]

_VerificationTokenWhereUnique_token_Input = TypedDict(
    '_VerificationTokenWhereUnique_token_Input',
    {
        'token': '_str',
    },
    total=True
)

_VerificationTokenCompoundidentifier_tokenKeyInner = TypedDict(
    '_VerificationTokenCompoundidentifier_tokenKeyInner',
    {
        'identifier': '_str',
        'token': '_str',
    },
    total=True
)

_VerificationTokenCompoundidentifier_tokenKey = TypedDict(
    '_VerificationTokenCompoundidentifier_tokenKey',
    {
        'identifier_token': '_VerificationTokenCompoundidentifier_tokenKeyInner',
    },
    total=True
)

VerificationTokenWhereUniqueInput = Union[
    '_VerificationTokenWhereUnique_token_Input',
    '_VerificationTokenCompoundidentifier_tokenKey',
]


class VerificationTokenUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    identifier: _str
    token: _str
    expires: datetime.datetime


class VerificationTokenUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    identifier: _str
    token: _str
    expires: datetime.datetime


class VerificationTokenUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['VerificationTokenCreateWithoutRelationsInput']
    connect: List['VerificationTokenWhereUniqueInput']
    connect_or_create: List['VerificationTokenConnectOrCreateWithoutRelationsInput']
    set: List['VerificationTokenWhereUniqueInput']
    disconnect: List['VerificationTokenWhereUniqueInput']
    delete: List['VerificationTokenWhereUniqueInput']

    # TODO
    # update: List['VerificationTokenUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['VerificationTokenUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['VerificationTokenScalarWhereInput']
    # upsert: List['VerificationTokenUpserteWithWhereUniqueWithoutRelationsInput']


class VerificationTokenUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'VerificationTokenCreateWithoutRelationsInput'
    connect: 'VerificationTokenWhereUniqueInput'
    connect_or_create: 'VerificationTokenConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'VerificationTokenUpdateInput'
    # upsert: 'VerificationTokenUpsertWithoutRelationsInput'


class VerificationTokenUpsertInput(TypedDict):
    create: 'VerificationTokenCreateInput'
    update: 'VerificationTokenUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_VerificationToken_identifier_OrderByInput = TypedDict(
    '_VerificationToken_identifier_OrderByInput',
    {
        'identifier': 'SortOrder',
    },
    total=True
)

_VerificationToken_token_OrderByInput = TypedDict(
    '_VerificationToken_token_OrderByInput',
    {
        'token': 'SortOrder',
    },
    total=True
)

_VerificationToken_expires_OrderByInput = TypedDict(
    '_VerificationToken_expires_OrderByInput',
    {
        'expires': 'SortOrder',
    },
    total=True
)

_VerificationToken_RelevanceInner = TypedDict(
    '_VerificationToken_RelevanceInner',
    {
        'fields': 'List[VerificationTokenScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_VerificationToken_RelevanceOrderByInput = TypedDict(
    '_VerificationToken_RelevanceOrderByInput',
    {
        '_relevance': '_VerificationToken_RelevanceInner',
    },
    total=True
)

VerificationTokenOrderByInput = Union[
    '_VerificationToken_identifier_OrderByInput',
    '_VerificationToken_token_OrderByInput',
    '_VerificationToken_expires_OrderByInput',
    '_VerificationToken_RelevanceOrderByInput',
]



# recursive VerificationToken types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

VerificationTokenRelationFilter = TypedDict(
    'VerificationTokenRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class VerificationTokenListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class VerificationTokenInclude(TypedDict, total=False):
    """VerificationToken relational arguments"""


    

class UserIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive1']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromVerificationTokenRecursive1']


class UserIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive2']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromVerificationTokenRecursive2']


class UserIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive3']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromVerificationTokenRecursive3']


class UserIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive4']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromVerificationTokenRecursive4']


class UserIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class UserArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyUserArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class AccountIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class AccountIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class AccountIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class AccountIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class AccountArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyAccountArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class SessionIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class SessionIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class SessionIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class SessionIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class SessionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManySessionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class VerificationTokenArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyVerificationTokenArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class EventIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    location: Union[bool, 'LocationArgsFromVerificationTokenRecursive1']
    community: Union[bool, 'CommunityArgsFromVerificationTokenRecursive1']
    starredBy: Union[bool, 'FindManyUserEventArgsFromVerificationTokenRecursive1']


class EventIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    location: Union[bool, 'LocationArgsFromVerificationTokenRecursive2']
    community: Union[bool, 'CommunityArgsFromVerificationTokenRecursive2']
    starredBy: Union[bool, 'FindManyUserEventArgsFromVerificationTokenRecursive2']


class EventIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    location: Union[bool, 'LocationArgsFromVerificationTokenRecursive3']
    community: Union[bool, 'CommunityArgsFromVerificationTokenRecursive3']
    starredBy: Union[bool, 'FindManyUserEventArgsFromVerificationTokenRecursive3']


class EventIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    location: Union[bool, 'LocationArgsFromVerificationTokenRecursive4']
    community: Union[bool, 'CommunityArgsFromVerificationTokenRecursive4']
    starredBy: Union[bool, 'FindManyUserEventArgsFromVerificationTokenRecursive4']


class EventIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class EventArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyEventArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class LocationIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    events: Union[bool, 'FindManyEventArgsFromVerificationTokenRecursive1']


class LocationIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    events: Union[bool, 'FindManyEventArgsFromVerificationTokenRecursive2']


class LocationIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    events: Union[bool, 'FindManyEventArgsFromVerificationTokenRecursive3']


class LocationIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    events: Union[bool, 'FindManyEventArgsFromVerificationTokenRecursive4']


class LocationIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class LocationArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'LocationIncludeFromLocationRecursive1'


class LocationArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'LocationIncludeFromLocationRecursive2'


class LocationArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'LocationIncludeFromLocationRecursive3'


class LocationArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'LocationIncludeFromLocationRecursive4'


class LocationArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyLocationArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive1'


class FindManyLocationArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive2'


class FindManyLocationArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive3'


class FindManyLocationArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive4'


class FindManyLocationArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    
    

class CommunityIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    events: Union[bool, 'FindManyEventArgsFromVerificationTokenRecursive1']


class CommunityIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    events: Union[bool, 'FindManyEventArgsFromVerificationTokenRecursive2']


class CommunityIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    events: Union[bool, 'FindManyEventArgsFromVerificationTokenRecursive3']


class CommunityIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    events: Union[bool, 'FindManyEventArgsFromVerificationTokenRecursive4']


class CommunityIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class CommunityArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'CommunityIncludeFromCommunityRecursive1'


class CommunityArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'CommunityIncludeFromCommunityRecursive2'


class CommunityArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'CommunityIncludeFromCommunityRecursive3'


class CommunityArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'CommunityIncludeFromCommunityRecursive4'


class CommunityArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyCommunityArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive1'


class FindManyCommunityArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive2'


class FindManyCommunityArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive3'


class FindManyCommunityArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive4'


class FindManyCommunityArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    
    

class UserEventIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']
    event: Union[bool, 'EventArgsFromVerificationTokenRecursive1']


class UserEventIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']
    event: Union[bool, 'EventArgsFromVerificationTokenRecursive2']


class UserEventIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']
    event: Union[bool, 'EventArgsFromVerificationTokenRecursive3']


class UserEventIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']
    event: Union[bool, 'EventArgsFromVerificationTokenRecursive4']


class UserEventIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class UserEventArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserEventIncludeFromUserEventRecursive1'


class UserEventArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserEventIncludeFromUserEventRecursive2'


class UserEventArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserEventIncludeFromUserEventRecursive3'


class UserEventArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserEventIncludeFromUserEventRecursive4'


class UserEventArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyUserEventArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive1'


class FindManyUserEventArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive2'


class FindManyUserEventArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive3'


class FindManyUserEventArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive4'


class FindManyUserEventArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    


FindManyVerificationTokenArgs = FindManyVerificationTokenArgsFromVerificationToken
FindFirstVerificationTokenArgs = FindManyVerificationTokenArgsFromVerificationToken


    

class VerificationTokenWhereInput(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive1', List['VerificationTokenWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive1']
    OR: List['VerificationTokenWhereInputRecursive1']
    NOT: List['VerificationTokenWhereInputRecursive1']


class VerificationTokenWhereInputRecursive1(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive2', List['VerificationTokenWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive2']
    OR: List['VerificationTokenWhereInputRecursive2']
    NOT: List['VerificationTokenWhereInputRecursive2']


class VerificationTokenWhereInputRecursive2(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive3', List['VerificationTokenWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive3']
    OR: List['VerificationTokenWhereInputRecursive3']
    NOT: List['VerificationTokenWhereInputRecursive3']


class VerificationTokenWhereInputRecursive3(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive4', List['VerificationTokenWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive4']
    OR: List['VerificationTokenWhereInputRecursive4']
    NOT: List['VerificationTokenWhereInputRecursive4']


class VerificationTokenWhereInputRecursive4(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate VerificationToken types


    

class VerificationTokenScalarWhereWithAggregatesInput(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive1']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive1']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive1']


class VerificationTokenScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive2']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive2']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive2']


class VerificationTokenScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive3']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive3']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive3']


class VerificationTokenScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive4']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive4']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive4']


class VerificationTokenScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class VerificationTokenGroupByOutput(TypedDict, total=False):
    identifier: _str
    token: _str
    expires: datetime.datetime
    _sum: 'VerificationTokenSumAggregateOutput'
    _avg: 'VerificationTokenAvgAggregateOutput'
    _min: 'VerificationTokenMinAggregateOutput'
    _max: 'VerificationTokenMaxAggregateOutput'
    _count: 'VerificationTokenCountAggregateOutput'


class VerificationTokenAvgAggregateOutput(TypedDict, total=False):
    """VerificationToken output for aggregating averages"""


class VerificationTokenSumAggregateOutput(TypedDict, total=False):
    """VerificationToken output for aggregating sums"""


class VerificationTokenScalarAggregateOutput(TypedDict, total=False):
    """VerificationToken output including scalar fields"""
    identifier: _str
    token: _str
    expires: datetime.datetime


VerificationTokenMinAggregateOutput = VerificationTokenScalarAggregateOutput
VerificationTokenMaxAggregateOutput = VerificationTokenScalarAggregateOutput


class VerificationTokenMaxAggregateInput(TypedDict, total=False):
    """VerificationToken input for aggregating by max"""
    identifier: bool
    token: bool
    expires: bool


class VerificationTokenMinAggregateInput(TypedDict, total=False):
    """VerificationToken input for aggregating by min"""
    identifier: bool
    token: bool
    expires: bool


class VerificationTokenNumberAggregateInput(TypedDict, total=False):
    """VerificationToken input for aggregating numbers"""


VerificationTokenAvgAggregateInput = VerificationTokenNumberAggregateInput
VerificationTokenSumAggregateInput = VerificationTokenNumberAggregateInput


VerificationTokenCountAggregateInput = TypedDict(
    'VerificationTokenCountAggregateInput',
    {
        'identifier': bool,
        'token': bool,
        'expires': bool,
        '_all': bool,
    },
    total=False,
)

VerificationTokenCountAggregateOutput = TypedDict(
    'VerificationTokenCountAggregateOutput',
    {
        'identifier': int,
        'token': int,
        'expires': int,
        '_all': int,
    },
    total=False,
)


VerificationTokenKeys = Literal[
    'identifier',
    'token',
    'expires',
]
VerificationTokenScalarFieldKeys = Literal[
    'identifier',
    'token',
    'expires',
]
VerificationTokenScalarFieldKeysT = TypeVar('VerificationTokenScalarFieldKeysT', bound=VerificationTokenScalarFieldKeys)

VerificationTokenRelationalFieldKeys = _NoneType

# Event types

class EventOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Event create method"""
    id: _str
    externalId: Optional[_str]
    url: Optional[_str]
    cleCredits: Optional[_float]
    status: 'enums.EventStatus'
    submittedAt: datetime.datetime
    updatedAt: datetime.datetime
    updatedBy: Optional[_str]
    notes: Optional[_str]
    locationId: Optional[_str]
    location: 'LocationCreateNestedWithoutRelationsInput'
    communityId: Optional[_str]
    community: 'CommunityCreateNestedWithoutRelationsInput'
    starredBy: 'UserEventCreateManyNestedWithoutRelationsInput'
    category: List[_str]
    tags: List[_str]
    eventType: Optional[_str]
    image: Optional[_str]
    price: Optional['fields.Json']
    metadata: Optional['fields.Json']


class EventCreateInput(EventOptionalCreateInput):
    """Required arguments to the Event create method"""
    name: _str
    description: _str
    startDate: datetime.datetime
    endDate: datetime.datetime
    locationName: _str
    submittedBy: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class EventOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Event create method, without relations"""
    id: _str
    externalId: Optional[_str]
    url: Optional[_str]
    cleCredits: Optional[_float]
    status: 'enums.EventStatus'
    submittedAt: datetime.datetime
    updatedAt: datetime.datetime
    updatedBy: Optional[_str]
    notes: Optional[_str]
    locationId: Optional[_str]
    communityId: Optional[_str]
    category: List[_str]
    tags: List[_str]
    eventType: Optional[_str]
    image: Optional[_str]
    price: Optional['fields.Json']
    metadata: Optional['fields.Json']


class EventCreateWithoutRelationsInput(EventOptionalCreateWithoutRelationsInput):
    """Required arguments to the Event create method, without relations"""
    name: _str
    description: _str
    startDate: datetime.datetime
    endDate: datetime.datetime
    locationName: _str
    submittedBy: _str

class EventConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'EventCreateWithoutRelationsInput'
    where: 'EventWhereUniqueInput'

class EventCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'EventCreateWithoutRelationsInput'
    connect: 'EventWhereUniqueInput'
    connect_or_create: 'EventConnectOrCreateWithoutRelationsInput'


class EventCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['EventCreateWithoutRelationsInput', List['EventCreateWithoutRelationsInput']]
    connect: Union['EventWhereUniqueInput', List['EventWhereUniqueInput']]
    connect_or_create: Union['EventConnectOrCreateWithoutRelationsInput', List['EventConnectOrCreateWithoutRelationsInput']]

_EventWhereUnique_id_Input = TypedDict(
    '_EventWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_EventWhereUnique_externalId_Input = TypedDict(
    '_EventWhereUnique_externalId_Input',
    {
        'externalId': '_str',
    },
    total=True
)

_EventWhereUnique_url_Input = TypedDict(
    '_EventWhereUnique_url_Input',
    {
        'url': '_str',
    },
    total=True
)

EventWhereUniqueInput = Union[
    '_EventWhereUnique_id_Input',
    '_EventWhereUnique_externalId_Input',
    '_EventWhereUnique_url_Input',
]


class EventUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    externalId: Optional[_str]
    name: _str
    description: _str
    startDate: datetime.datetime
    endDate: datetime.datetime
    locationName: _str
    url: Optional[_str]
    cleCredits: Optional[Union[AtomicFloatInput, _float]]
    status: 'enums.EventStatus'
    submittedBy: _str
    submittedAt: datetime.datetime
    updatedAt: datetime.datetime
    updatedBy: Optional[_str]
    notes: Optional[_str]
    location: 'LocationUpdateOneWithoutRelationsInput'
    community: 'CommunityUpdateOneWithoutRelationsInput'
    starredBy: 'UserEventUpdateManyWithoutRelationsInput'
    category: 'types.StringListUpdate'
    tags: 'types.StringListUpdate'
    eventType: Optional[_str]
    image: Optional[_str]
    price: Optional['fields.Json']
    metadata: Optional['fields.Json']


class EventUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    externalId: Optional[_str]
    name: _str
    description: _str
    startDate: datetime.datetime
    endDate: datetime.datetime
    locationName: _str
    url: Optional[_str]
    cleCredits: Optional[Union[AtomicFloatInput, _float]]
    status: 'enums.EventStatus'
    submittedBy: _str
    submittedAt: datetime.datetime
    updatedAt: datetime.datetime
    updatedBy: Optional[_str]
    notes: Optional[_str]
    category: 'types.StringListUpdate'
    tags: 'types.StringListUpdate'
    eventType: Optional[_str]
    image: Optional[_str]
    price: Optional['fields.Json']
    metadata: Optional['fields.Json']


class EventUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['EventCreateWithoutRelationsInput']
    connect: List['EventWhereUniqueInput']
    connect_or_create: List['EventConnectOrCreateWithoutRelationsInput']
    set: List['EventWhereUniqueInput']
    disconnect: List['EventWhereUniqueInput']
    delete: List['EventWhereUniqueInput']

    # TODO
    # update: List['EventUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['EventUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['EventScalarWhereInput']
    # upsert: List['EventUpserteWithWhereUniqueWithoutRelationsInput']


class EventUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'EventCreateWithoutRelationsInput'
    connect: 'EventWhereUniqueInput'
    connect_or_create: 'EventConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'EventUpdateInput'
    # upsert: 'EventUpsertWithoutRelationsInput'


class EventUpsertInput(TypedDict):
    create: 'EventCreateInput'
    update: 'EventUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Event_id_OrderByInput = TypedDict(
    '_Event_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Event_externalId_OrderByInput = TypedDict(
    '_Event_externalId_OrderByInput',
    {
        'externalId': 'SortOrder',
    },
    total=True
)

_Event_name_OrderByInput = TypedDict(
    '_Event_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Event_description_OrderByInput = TypedDict(
    '_Event_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Event_startDate_OrderByInput = TypedDict(
    '_Event_startDate_OrderByInput',
    {
        'startDate': 'SortOrder',
    },
    total=True
)

_Event_endDate_OrderByInput = TypedDict(
    '_Event_endDate_OrderByInput',
    {
        'endDate': 'SortOrder',
    },
    total=True
)

_Event_locationName_OrderByInput = TypedDict(
    '_Event_locationName_OrderByInput',
    {
        'locationName': 'SortOrder',
    },
    total=True
)

_Event_url_OrderByInput = TypedDict(
    '_Event_url_OrderByInput',
    {
        'url': 'SortOrder',
    },
    total=True
)

_Event_cleCredits_OrderByInput = TypedDict(
    '_Event_cleCredits_OrderByInput',
    {
        'cleCredits': 'SortOrder',
    },
    total=True
)

_Event_status_OrderByInput = TypedDict(
    '_Event_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Event_submittedBy_OrderByInput = TypedDict(
    '_Event_submittedBy_OrderByInput',
    {
        'submittedBy': 'SortOrder',
    },
    total=True
)

_Event_submittedAt_OrderByInput = TypedDict(
    '_Event_submittedAt_OrderByInput',
    {
        'submittedAt': 'SortOrder',
    },
    total=True
)

_Event_updatedAt_OrderByInput = TypedDict(
    '_Event_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Event_updatedBy_OrderByInput = TypedDict(
    '_Event_updatedBy_OrderByInput',
    {
        'updatedBy': 'SortOrder',
    },
    total=True
)

_Event_notes_OrderByInput = TypedDict(
    '_Event_notes_OrderByInput',
    {
        'notes': 'SortOrder',
    },
    total=True
)

_Event_locationId_OrderByInput = TypedDict(
    '_Event_locationId_OrderByInput',
    {
        'locationId': 'SortOrder',
    },
    total=True
)

_Event_communityId_OrderByInput = TypedDict(
    '_Event_communityId_OrderByInput',
    {
        'communityId': 'SortOrder',
    },
    total=True
)

_Event_category_OrderByInput = TypedDict(
    '_Event_category_OrderByInput',
    {
        'category': 'SortOrder',
    },
    total=True
)

_Event_tags_OrderByInput = TypedDict(
    '_Event_tags_OrderByInput',
    {
        'tags': 'SortOrder',
    },
    total=True
)

_Event_eventType_OrderByInput = TypedDict(
    '_Event_eventType_OrderByInput',
    {
        'eventType': 'SortOrder',
    },
    total=True
)

_Event_image_OrderByInput = TypedDict(
    '_Event_image_OrderByInput',
    {
        'image': 'SortOrder',
    },
    total=True
)

_Event_price_OrderByInput = TypedDict(
    '_Event_price_OrderByInput',
    {
        'price': 'SortOrder',
    },
    total=True
)

_Event_metadata_OrderByInput = TypedDict(
    '_Event_metadata_OrderByInput',
    {
        'metadata': 'SortOrder',
    },
    total=True
)

_Event_RelevanceInner = TypedDict(
    '_Event_RelevanceInner',
    {
        'fields': 'List[EventScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Event_RelevanceOrderByInput = TypedDict(
    '_Event_RelevanceOrderByInput',
    {
        '_relevance': '_Event_RelevanceInner',
    },
    total=True
)

EventOrderByInput = Union[
    '_Event_id_OrderByInput',
    '_Event_externalId_OrderByInput',
    '_Event_name_OrderByInput',
    '_Event_description_OrderByInput',
    '_Event_startDate_OrderByInput',
    '_Event_endDate_OrderByInput',
    '_Event_locationName_OrderByInput',
    '_Event_url_OrderByInput',
    '_Event_cleCredits_OrderByInput',
    '_Event_status_OrderByInput',
    '_Event_submittedBy_OrderByInput',
    '_Event_submittedAt_OrderByInput',
    '_Event_updatedAt_OrderByInput',
    '_Event_updatedBy_OrderByInput',
    '_Event_notes_OrderByInput',
    '_Event_locationId_OrderByInput',
    '_Event_communityId_OrderByInput',
    '_Event_category_OrderByInput',
    '_Event_tags_OrderByInput',
    '_Event_eventType_OrderByInput',
    '_Event_image_OrderByInput',
    '_Event_price_OrderByInput',
    '_Event_metadata_OrderByInput',
    '_Event_RelevanceOrderByInput',
]



# recursive Event types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

EventRelationFilter = TypedDict(
    'EventRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class EventListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class EventInclude(TypedDict, total=False):
    """Event relational arguments"""
    location: Union[bool, 'LocationArgsFromEvent']
    community: Union[bool, 'CommunityArgsFromEvent']
    starredBy: Union[bool, 'FindManyUserEventArgsFromEvent']


    

class UserIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""
    accounts: Union[bool, 'FindManyAccountArgsFromEventRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromEventRecursive1']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromEventRecursive1']


class UserIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""
    accounts: Union[bool, 'FindManyAccountArgsFromEventRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromEventRecursive2']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromEventRecursive2']


class UserIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""
    accounts: Union[bool, 'FindManyAccountArgsFromEventRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromEventRecursive3']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromEventRecursive3']


class UserIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""
    accounts: Union[bool, 'FindManyAccountArgsFromEventRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromEventRecursive4']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromEventRecursive4']


class UserIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class UserArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyUserArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""
    user: Union[bool, 'UserArgsFromEventRecursive1']


class AccountIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""
    user: Union[bool, 'UserArgsFromEventRecursive2']


class AccountIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""
    user: Union[bool, 'UserArgsFromEventRecursive3']


class AccountIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""
    user: Union[bool, 'UserArgsFromEventRecursive4']


class AccountIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class AccountArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyAccountArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""
    user: Union[bool, 'UserArgsFromEventRecursive1']


class SessionIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""
    user: Union[bool, 'UserArgsFromEventRecursive2']


class SessionIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""
    user: Union[bool, 'UserArgsFromEventRecursive3']


class SessionIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""
    user: Union[bool, 'UserArgsFromEventRecursive4']


class SessionIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class SessionArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManySessionArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""


class VerificationTokenIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""


class VerificationTokenIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""


class VerificationTokenIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""


class VerificationTokenIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class VerificationTokenArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyVerificationTokenArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class EventIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""
    location: Union[bool, 'LocationArgsFromEventRecursive1']
    community: Union[bool, 'CommunityArgsFromEventRecursive1']
    starredBy: Union[bool, 'FindManyUserEventArgsFromEventRecursive1']


class EventIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""
    location: Union[bool, 'LocationArgsFromEventRecursive2']
    community: Union[bool, 'CommunityArgsFromEventRecursive2']
    starredBy: Union[bool, 'FindManyUserEventArgsFromEventRecursive2']


class EventIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""
    location: Union[bool, 'LocationArgsFromEventRecursive3']
    community: Union[bool, 'CommunityArgsFromEventRecursive3']
    starredBy: Union[bool, 'FindManyUserEventArgsFromEventRecursive3']


class EventIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""
    location: Union[bool, 'LocationArgsFromEventRecursive4']
    community: Union[bool, 'CommunityArgsFromEventRecursive4']
    starredBy: Union[bool, 'FindManyUserEventArgsFromEventRecursive4']


class EventIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class EventArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyEventArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class LocationIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""
    events: Union[bool, 'FindManyEventArgsFromEventRecursive1']


class LocationIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""
    events: Union[bool, 'FindManyEventArgsFromEventRecursive2']


class LocationIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""
    events: Union[bool, 'FindManyEventArgsFromEventRecursive3']


class LocationIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""
    events: Union[bool, 'FindManyEventArgsFromEventRecursive4']


class LocationIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class LocationArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'LocationIncludeFromLocationRecursive1'


class LocationArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'LocationIncludeFromLocationRecursive2'


class LocationArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'LocationIncludeFromLocationRecursive3'


class LocationArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'LocationIncludeFromLocationRecursive4'


class LocationArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyLocationArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive1'


class FindManyLocationArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive2'


class FindManyLocationArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive3'


class FindManyLocationArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive4'


class FindManyLocationArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    
    

class CommunityIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""
    events: Union[bool, 'FindManyEventArgsFromEventRecursive1']


class CommunityIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""
    events: Union[bool, 'FindManyEventArgsFromEventRecursive2']


class CommunityIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""
    events: Union[bool, 'FindManyEventArgsFromEventRecursive3']


class CommunityIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""
    events: Union[bool, 'FindManyEventArgsFromEventRecursive4']


class CommunityIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class CommunityArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'CommunityIncludeFromCommunityRecursive1'


class CommunityArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'CommunityIncludeFromCommunityRecursive2'


class CommunityArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'CommunityIncludeFromCommunityRecursive3'


class CommunityArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'CommunityIncludeFromCommunityRecursive4'


class CommunityArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyCommunityArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive1'


class FindManyCommunityArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive2'


class FindManyCommunityArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive3'


class FindManyCommunityArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive4'


class FindManyCommunityArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    
    

class UserEventIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""
    user: Union[bool, 'UserArgsFromEventRecursive1']
    event: Union[bool, 'EventArgsFromEventRecursive1']


class UserEventIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""
    user: Union[bool, 'UserArgsFromEventRecursive2']
    event: Union[bool, 'EventArgsFromEventRecursive2']


class UserEventIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""
    user: Union[bool, 'UserArgsFromEventRecursive3']
    event: Union[bool, 'EventArgsFromEventRecursive3']


class UserEventIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""
    user: Union[bool, 'UserArgsFromEventRecursive4']
    event: Union[bool, 'EventArgsFromEventRecursive4']


class UserEventIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class UserEventArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'UserEventIncludeFromUserEventRecursive1'


class UserEventArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'UserEventIncludeFromUserEventRecursive2'


class UserEventArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'UserEventIncludeFromUserEventRecursive3'


class UserEventArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'UserEventIncludeFromUserEventRecursive4'


class UserEventArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyUserEventArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive1'


class FindManyUserEventArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive2'


class FindManyUserEventArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive3'


class FindManyUserEventArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive4'


class FindManyUserEventArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    


FindManyEventArgs = FindManyEventArgsFromEvent
FindFirstEventArgs = FindManyEventArgsFromEvent


    

class EventWhereInput(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    externalId: Union[None, _str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeFilter']
    locationName: Union[_str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    cleCredits: Union[None, _float, 'types.FloatFilter']
    status: 'enums.EventStatus'
    submittedBy: Union[_str, 'types.StringFilter']
    submittedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedBy: Union[None, _str, 'types.StringFilter']
    notes: Union[None, _str, 'types.StringFilter']
    locationId: Union[None, _str, 'types.StringFilter']
    location: 'LocationRelationFilter'
    communityId: Union[None, _str, 'types.StringFilter']
    community: 'CommunityRelationFilter'
    starredBy: 'UserEventListRelationFilter'
    category: 'types.StringListFilter'
    tags: 'types.StringListFilter'
    eventType: Union[None, _str, 'types.StringFilter']
    image: Union[None, _str, 'types.StringFilter']
    price: Union[None, 'fields.Json', 'types.JsonFilter']
    metadata: Union[None, 'fields.Json', 'types.JsonFilter']

    # should be noted that AND and NOT should be Union['EventWhereInputRecursive1', List['EventWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['EventWhereInputRecursive1']
    OR: List['EventWhereInputRecursive1']
    NOT: List['EventWhereInputRecursive1']


class EventWhereInputRecursive1(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    externalId: Union[None, _str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeFilter']
    locationName: Union[_str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    cleCredits: Union[None, _float, 'types.FloatFilter']
    status: 'enums.EventStatus'
    submittedBy: Union[_str, 'types.StringFilter']
    submittedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedBy: Union[None, _str, 'types.StringFilter']
    notes: Union[None, _str, 'types.StringFilter']
    locationId: Union[None, _str, 'types.StringFilter']
    location: 'LocationRelationFilter'
    communityId: Union[None, _str, 'types.StringFilter']
    community: 'CommunityRelationFilter'
    starredBy: 'UserEventListRelationFilter'
    category: 'types.StringListFilter'
    tags: 'types.StringListFilter'
    eventType: Union[None, _str, 'types.StringFilter']
    image: Union[None, _str, 'types.StringFilter']
    price: Union[None, 'fields.Json', 'types.JsonFilter']
    metadata: Union[None, 'fields.Json', 'types.JsonFilter']

    # should be noted that AND and NOT should be Union['EventWhereInputRecursive2', List['EventWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['EventWhereInputRecursive2']
    OR: List['EventWhereInputRecursive2']
    NOT: List['EventWhereInputRecursive2']


class EventWhereInputRecursive2(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    externalId: Union[None, _str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeFilter']
    locationName: Union[_str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    cleCredits: Union[None, _float, 'types.FloatFilter']
    status: 'enums.EventStatus'
    submittedBy: Union[_str, 'types.StringFilter']
    submittedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedBy: Union[None, _str, 'types.StringFilter']
    notes: Union[None, _str, 'types.StringFilter']
    locationId: Union[None, _str, 'types.StringFilter']
    location: 'LocationRelationFilter'
    communityId: Union[None, _str, 'types.StringFilter']
    community: 'CommunityRelationFilter'
    starredBy: 'UserEventListRelationFilter'
    category: 'types.StringListFilter'
    tags: 'types.StringListFilter'
    eventType: Union[None, _str, 'types.StringFilter']
    image: Union[None, _str, 'types.StringFilter']
    price: Union[None, 'fields.Json', 'types.JsonFilter']
    metadata: Union[None, 'fields.Json', 'types.JsonFilter']

    # should be noted that AND and NOT should be Union['EventWhereInputRecursive3', List['EventWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['EventWhereInputRecursive3']
    OR: List['EventWhereInputRecursive3']
    NOT: List['EventWhereInputRecursive3']


class EventWhereInputRecursive3(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    externalId: Union[None, _str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeFilter']
    locationName: Union[_str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    cleCredits: Union[None, _float, 'types.FloatFilter']
    status: 'enums.EventStatus'
    submittedBy: Union[_str, 'types.StringFilter']
    submittedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedBy: Union[None, _str, 'types.StringFilter']
    notes: Union[None, _str, 'types.StringFilter']
    locationId: Union[None, _str, 'types.StringFilter']
    location: 'LocationRelationFilter'
    communityId: Union[None, _str, 'types.StringFilter']
    community: 'CommunityRelationFilter'
    starredBy: 'UserEventListRelationFilter'
    category: 'types.StringListFilter'
    tags: 'types.StringListFilter'
    eventType: Union[None, _str, 'types.StringFilter']
    image: Union[None, _str, 'types.StringFilter']
    price: Union[None, 'fields.Json', 'types.JsonFilter']
    metadata: Union[None, 'fields.Json', 'types.JsonFilter']

    # should be noted that AND and NOT should be Union['EventWhereInputRecursive4', List['EventWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['EventWhereInputRecursive4']
    OR: List['EventWhereInputRecursive4']
    NOT: List['EventWhereInputRecursive4']


class EventWhereInputRecursive4(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    externalId: Union[None, _str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeFilter']
    locationName: Union[_str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    cleCredits: Union[None, _float, 'types.FloatFilter']
    status: 'enums.EventStatus'
    submittedBy: Union[_str, 'types.StringFilter']
    submittedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedBy: Union[None, _str, 'types.StringFilter']
    notes: Union[None, _str, 'types.StringFilter']
    locationId: Union[None, _str, 'types.StringFilter']
    location: 'LocationRelationFilter'
    communityId: Union[None, _str, 'types.StringFilter']
    community: 'CommunityRelationFilter'
    starredBy: 'UserEventListRelationFilter'
    category: 'types.StringListFilter'
    tags: 'types.StringListFilter'
    eventType: Union[None, _str, 'types.StringFilter']
    image: Union[None, _str, 'types.StringFilter']
    price: Union[None, 'fields.Json', 'types.JsonFilter']
    metadata: Union[None, 'fields.Json', 'types.JsonFilter']



# aggregate Event types


    

class EventScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    locationName: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    cleCredits: Union[_float, 'types.FloatWithAggregatesFilter']
    status: 'enums.EventStatus'
    submittedBy: Union[_str, 'types.StringWithAggregatesFilter']
    submittedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedBy: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    locationId: Union[_str, 'types.StringWithAggregatesFilter']
    communityId: Union[_str, 'types.StringWithAggregatesFilter']
    category: Union[_str, 'types.StringWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    eventType: Union[_str, 'types.StringWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    metadata: Union['fields.Json', 'types.JsonWithAggregatesFilter']

    AND: List['EventScalarWhereWithAggregatesInputRecursive1']
    OR: List['EventScalarWhereWithAggregatesInputRecursive1']
    NOT: List['EventScalarWhereWithAggregatesInputRecursive1']


class EventScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    locationName: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    cleCredits: Union[_float, 'types.FloatWithAggregatesFilter']
    status: 'enums.EventStatus'
    submittedBy: Union[_str, 'types.StringWithAggregatesFilter']
    submittedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedBy: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    locationId: Union[_str, 'types.StringWithAggregatesFilter']
    communityId: Union[_str, 'types.StringWithAggregatesFilter']
    category: Union[_str, 'types.StringWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    eventType: Union[_str, 'types.StringWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    metadata: Union['fields.Json', 'types.JsonWithAggregatesFilter']

    AND: List['EventScalarWhereWithAggregatesInputRecursive2']
    OR: List['EventScalarWhereWithAggregatesInputRecursive2']
    NOT: List['EventScalarWhereWithAggregatesInputRecursive2']


class EventScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    locationName: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    cleCredits: Union[_float, 'types.FloatWithAggregatesFilter']
    status: 'enums.EventStatus'
    submittedBy: Union[_str, 'types.StringWithAggregatesFilter']
    submittedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedBy: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    locationId: Union[_str, 'types.StringWithAggregatesFilter']
    communityId: Union[_str, 'types.StringWithAggregatesFilter']
    category: Union[_str, 'types.StringWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    eventType: Union[_str, 'types.StringWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    metadata: Union['fields.Json', 'types.JsonWithAggregatesFilter']

    AND: List['EventScalarWhereWithAggregatesInputRecursive3']
    OR: List['EventScalarWhereWithAggregatesInputRecursive3']
    NOT: List['EventScalarWhereWithAggregatesInputRecursive3']


class EventScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    locationName: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    cleCredits: Union[_float, 'types.FloatWithAggregatesFilter']
    status: 'enums.EventStatus'
    submittedBy: Union[_str, 'types.StringWithAggregatesFilter']
    submittedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedBy: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    locationId: Union[_str, 'types.StringWithAggregatesFilter']
    communityId: Union[_str, 'types.StringWithAggregatesFilter']
    category: Union[_str, 'types.StringWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    eventType: Union[_str, 'types.StringWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    metadata: Union['fields.Json', 'types.JsonWithAggregatesFilter']

    AND: List['EventScalarWhereWithAggregatesInputRecursive4']
    OR: List['EventScalarWhereWithAggregatesInputRecursive4']
    NOT: List['EventScalarWhereWithAggregatesInputRecursive4']


class EventScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    locationName: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    cleCredits: Union[_float, 'types.FloatWithAggregatesFilter']
    status: 'enums.EventStatus'
    submittedBy: Union[_str, 'types.StringWithAggregatesFilter']
    submittedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedBy: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    locationId: Union[_str, 'types.StringWithAggregatesFilter']
    communityId: Union[_str, 'types.StringWithAggregatesFilter']
    category: Union[_str, 'types.StringWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    eventType: Union[_str, 'types.StringWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    metadata: Union['fields.Json', 'types.JsonWithAggregatesFilter']



class EventGroupByOutput(TypedDict, total=False):
    id: _str
    externalId: _str
    name: _str
    description: _str
    startDate: datetime.datetime
    endDate: datetime.datetime
    locationName: _str
    url: _str
    cleCredits: _float
    status: 'enums.EventStatus'
    submittedBy: _str
    submittedAt: datetime.datetime
    updatedAt: datetime.datetime
    updatedBy: _str
    notes: _str
    locationId: _str
    communityId: _str
    category: List[_str]
    tags: List[_str]
    eventType: _str
    image: _str
    price: 'fields.Json'
    metadata: 'fields.Json'
    _sum: 'EventSumAggregateOutput'
    _avg: 'EventAvgAggregateOutput'
    _min: 'EventMinAggregateOutput'
    _max: 'EventMaxAggregateOutput'
    _count: 'EventCountAggregateOutput'


class EventAvgAggregateOutput(TypedDict, total=False):
    """Event output for aggregating averages"""
    cleCredits: float


class EventSumAggregateOutput(TypedDict, total=False):
    """Event output for aggregating sums"""
    cleCredits: _float


class EventScalarAggregateOutput(TypedDict, total=False):
    """Event output including scalar fields"""
    id: _str
    externalId: _str
    name: _str
    description: _str
    startDate: datetime.datetime
    endDate: datetime.datetime
    locationName: _str
    url: _str
    cleCredits: _float
    status: 'enums.EventStatus'
    submittedBy: _str
    submittedAt: datetime.datetime
    updatedAt: datetime.datetime
    updatedBy: _str
    notes: _str
    locationId: _str
    communityId: _str
    category: List[_str]
    tags: List[_str]
    eventType: _str
    image: _str
    price: 'fields.Json'
    metadata: 'fields.Json'


EventMinAggregateOutput = EventScalarAggregateOutput
EventMaxAggregateOutput = EventScalarAggregateOutput


class EventMaxAggregateInput(TypedDict, total=False):
    """Event input for aggregating by max"""
    id: bool
    externalId: bool
    name: bool
    description: bool
    startDate: bool
    endDate: bool
    locationName: bool
    url: bool
    cleCredits: bool
    status: bool
    submittedBy: bool
    submittedAt: bool
    updatedAt: bool
    updatedBy: bool
    notes: bool
    locationId: bool
    communityId: bool
    category: bool
    tags: bool
    eventType: bool
    image: bool
    price: bool
    metadata: bool


class EventMinAggregateInput(TypedDict, total=False):
    """Event input for aggregating by min"""
    id: bool
    externalId: bool
    name: bool
    description: bool
    startDate: bool
    endDate: bool
    locationName: bool
    url: bool
    cleCredits: bool
    status: bool
    submittedBy: bool
    submittedAt: bool
    updatedAt: bool
    updatedBy: bool
    notes: bool
    locationId: bool
    communityId: bool
    category: bool
    tags: bool
    eventType: bool
    image: bool
    price: bool
    metadata: bool


class EventNumberAggregateInput(TypedDict, total=False):
    """Event input for aggregating numbers"""
    cleCredits: bool


EventAvgAggregateInput = EventNumberAggregateInput
EventSumAggregateInput = EventNumberAggregateInput


EventCountAggregateInput = TypedDict(
    'EventCountAggregateInput',
    {
        'id': bool,
        'externalId': bool,
        'name': bool,
        'description': bool,
        'startDate': bool,
        'endDate': bool,
        'locationName': bool,
        'url': bool,
        'cleCredits': bool,
        'status': bool,
        'submittedBy': bool,
        'submittedAt': bool,
        'updatedAt': bool,
        'updatedBy': bool,
        'notes': bool,
        'locationId': bool,
        'communityId': bool,
        'category': bool,
        'tags': bool,
        'eventType': bool,
        'image': bool,
        'price': bool,
        'metadata': bool,
        '_all': bool,
    },
    total=False,
)

EventCountAggregateOutput = TypedDict(
    'EventCountAggregateOutput',
    {
        'id': int,
        'externalId': int,
        'name': int,
        'description': int,
        'startDate': int,
        'endDate': int,
        'locationName': int,
        'url': int,
        'cleCredits': int,
        'status': int,
        'submittedBy': int,
        'submittedAt': int,
        'updatedAt': int,
        'updatedBy': int,
        'notes': int,
        'locationId': int,
        'communityId': int,
        'category': int,
        'tags': int,
        'eventType': int,
        'image': int,
        'price': int,
        'metadata': int,
        '_all': int,
    },
    total=False,
)


EventKeys = Literal[
    'id',
    'externalId',
    'name',
    'description',
    'startDate',
    'endDate',
    'locationName',
    'url',
    'cleCredits',
    'status',
    'submittedBy',
    'submittedAt',
    'updatedAt',
    'updatedBy',
    'notes',
    'locationId',
    'location',
    'communityId',
    'community',
    'starredBy',
    'category',
    'tags',
    'eventType',
    'image',
    'price',
    'metadata',
]
EventScalarFieldKeys = Literal[
    'id',
    'externalId',
    'name',
    'description',
    'startDate',
    'endDate',
    'locationName',
    'url',
    'cleCredits',
    'status',
    'submittedBy',
    'submittedAt',
    'updatedAt',
    'updatedBy',
    'notes',
    'locationId',
    'communityId',
    'category',
    'tags',
    'eventType',
    'image',
    'price',
    'metadata',
]
EventScalarFieldKeysT = TypeVar('EventScalarFieldKeysT', bound=EventScalarFieldKeys)

EventRelationalFieldKeys = Literal[
        'location',
        'community',
        'starredBy',
    ]

# Location types

class LocationOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Location create method"""
    id: _str
    events: 'EventCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class LocationCreateInput(LocationOptionalCreateInput):
    """Required arguments to the Location create method"""
    name: _str
    address: _str
    city: _str
    state: _str
    zip: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class LocationOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Location create method, without relations"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class LocationCreateWithoutRelationsInput(LocationOptionalCreateWithoutRelationsInput):
    """Required arguments to the Location create method, without relations"""
    name: _str
    address: _str
    city: _str
    state: _str
    zip: _str

class LocationConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'LocationCreateWithoutRelationsInput'
    where: 'LocationWhereUniqueInput'

class LocationCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'LocationCreateWithoutRelationsInput'
    connect: 'LocationWhereUniqueInput'
    connect_or_create: 'LocationConnectOrCreateWithoutRelationsInput'


class LocationCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['LocationCreateWithoutRelationsInput', List['LocationCreateWithoutRelationsInput']]
    connect: Union['LocationWhereUniqueInput', List['LocationWhereUniqueInput']]
    connect_or_create: Union['LocationConnectOrCreateWithoutRelationsInput', List['LocationConnectOrCreateWithoutRelationsInput']]

_LocationWhereUnique_id_Input = TypedDict(
    '_LocationWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

LocationWhereUniqueInput = _LocationWhereUnique_id_Input


class LocationUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    address: _str
    city: _str
    state: _str
    zip: _str
    events: 'EventUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class LocationUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    address: _str
    city: _str
    state: _str
    zip: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class LocationUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['LocationCreateWithoutRelationsInput']
    connect: List['LocationWhereUniqueInput']
    connect_or_create: List['LocationConnectOrCreateWithoutRelationsInput']
    set: List['LocationWhereUniqueInput']
    disconnect: List['LocationWhereUniqueInput']
    delete: List['LocationWhereUniqueInput']

    # TODO
    # update: List['LocationUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['LocationUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['LocationScalarWhereInput']
    # upsert: List['LocationUpserteWithWhereUniqueWithoutRelationsInput']


class LocationUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'LocationCreateWithoutRelationsInput'
    connect: 'LocationWhereUniqueInput'
    connect_or_create: 'LocationConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'LocationUpdateInput'
    # upsert: 'LocationUpsertWithoutRelationsInput'


class LocationUpsertInput(TypedDict):
    create: 'LocationCreateInput'
    update: 'LocationUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Location_id_OrderByInput = TypedDict(
    '_Location_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Location_name_OrderByInput = TypedDict(
    '_Location_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Location_address_OrderByInput = TypedDict(
    '_Location_address_OrderByInput',
    {
        'address': 'SortOrder',
    },
    total=True
)

_Location_city_OrderByInput = TypedDict(
    '_Location_city_OrderByInput',
    {
        'city': 'SortOrder',
    },
    total=True
)

_Location_state_OrderByInput = TypedDict(
    '_Location_state_OrderByInput',
    {
        'state': 'SortOrder',
    },
    total=True
)

_Location_zip_OrderByInput = TypedDict(
    '_Location_zip_OrderByInput',
    {
        'zip': 'SortOrder',
    },
    total=True
)

_Location_createdAt_OrderByInput = TypedDict(
    '_Location_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Location_updatedAt_OrderByInput = TypedDict(
    '_Location_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Location_RelevanceInner = TypedDict(
    '_Location_RelevanceInner',
    {
        'fields': 'List[LocationScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Location_RelevanceOrderByInput = TypedDict(
    '_Location_RelevanceOrderByInput',
    {
        '_relevance': '_Location_RelevanceInner',
    },
    total=True
)

LocationOrderByInput = Union[
    '_Location_id_OrderByInput',
    '_Location_name_OrderByInput',
    '_Location_address_OrderByInput',
    '_Location_city_OrderByInput',
    '_Location_state_OrderByInput',
    '_Location_zip_OrderByInput',
    '_Location_createdAt_OrderByInput',
    '_Location_updatedAt_OrderByInput',
    '_Location_RelevanceOrderByInput',
]



# recursive Location types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

LocationRelationFilter = TypedDict(
    'LocationRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class LocationListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class LocationInclude(TypedDict, total=False):
    """Location relational arguments"""
    events: Union[bool, 'FindManyEventArgsFromLocation']


    

class UserIncludeFromLocation(TypedDict, total=False):
    """Relational arguments for Location"""
    accounts: Union[bool, 'FindManyAccountArgsFromLocationRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromLocationRecursive1']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromLocationRecursive1']


class UserIncludeFromLocationRecursive1(TypedDict, total=False):
    """Relational arguments for Location"""
    accounts: Union[bool, 'FindManyAccountArgsFromLocationRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromLocationRecursive2']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromLocationRecursive2']


class UserIncludeFromLocationRecursive2(TypedDict, total=False):
    """Relational arguments for Location"""
    accounts: Union[bool, 'FindManyAccountArgsFromLocationRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromLocationRecursive3']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromLocationRecursive3']


class UserIncludeFromLocationRecursive3(TypedDict, total=False):
    """Relational arguments for Location"""
    accounts: Union[bool, 'FindManyAccountArgsFromLocationRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromLocationRecursive4']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromLocationRecursive4']


class UserIncludeFromLocationRecursive4(TypedDict, total=False):
    """Relational arguments for Location"""

    

class UserArgsFromLocation(TypedDict, total=False):
    """Arguments for Location"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromLocationRecursive1(TypedDict, total=False):
    """Arguments for Location"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromLocationRecursive2(TypedDict, total=False):
    """Arguments for Location"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromLocationRecursive3(TypedDict, total=False):
    """Arguments for Location"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromLocationRecursive4(TypedDict, total=False):
    """Arguments for Location"""
    
    

class FindManyUserArgsFromLocation(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromLocationRecursive1(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromLocationRecursive2(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromLocationRecursive3(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromLocationRecursive4(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromLocation(TypedDict, total=False):
    """Relational arguments for Location"""
    user: Union[bool, 'UserArgsFromLocationRecursive1']


class AccountIncludeFromLocationRecursive1(TypedDict, total=False):
    """Relational arguments for Location"""
    user: Union[bool, 'UserArgsFromLocationRecursive2']


class AccountIncludeFromLocationRecursive2(TypedDict, total=False):
    """Relational arguments for Location"""
    user: Union[bool, 'UserArgsFromLocationRecursive3']


class AccountIncludeFromLocationRecursive3(TypedDict, total=False):
    """Relational arguments for Location"""
    user: Union[bool, 'UserArgsFromLocationRecursive4']


class AccountIncludeFromLocationRecursive4(TypedDict, total=False):
    """Relational arguments for Location"""

    

class AccountArgsFromLocation(TypedDict, total=False):
    """Arguments for Location"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromLocationRecursive1(TypedDict, total=False):
    """Arguments for Location"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromLocationRecursive2(TypedDict, total=False):
    """Arguments for Location"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromLocationRecursive3(TypedDict, total=False):
    """Arguments for Location"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromLocationRecursive4(TypedDict, total=False):
    """Arguments for Location"""
    
    

class FindManyAccountArgsFromLocation(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromLocationRecursive1(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromLocationRecursive2(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromLocationRecursive3(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromLocationRecursive4(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromLocation(TypedDict, total=False):
    """Relational arguments for Location"""
    user: Union[bool, 'UserArgsFromLocationRecursive1']


class SessionIncludeFromLocationRecursive1(TypedDict, total=False):
    """Relational arguments for Location"""
    user: Union[bool, 'UserArgsFromLocationRecursive2']


class SessionIncludeFromLocationRecursive2(TypedDict, total=False):
    """Relational arguments for Location"""
    user: Union[bool, 'UserArgsFromLocationRecursive3']


class SessionIncludeFromLocationRecursive3(TypedDict, total=False):
    """Relational arguments for Location"""
    user: Union[bool, 'UserArgsFromLocationRecursive4']


class SessionIncludeFromLocationRecursive4(TypedDict, total=False):
    """Relational arguments for Location"""

    

class SessionArgsFromLocation(TypedDict, total=False):
    """Arguments for Location"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromLocationRecursive1(TypedDict, total=False):
    """Arguments for Location"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromLocationRecursive2(TypedDict, total=False):
    """Arguments for Location"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromLocationRecursive3(TypedDict, total=False):
    """Arguments for Location"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromLocationRecursive4(TypedDict, total=False):
    """Arguments for Location"""
    
    

class FindManySessionArgsFromLocation(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromLocationRecursive1(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromLocationRecursive2(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromLocationRecursive3(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromLocationRecursive4(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromLocation(TypedDict, total=False):
    """Relational arguments for Location"""


class VerificationTokenIncludeFromLocationRecursive1(TypedDict, total=False):
    """Relational arguments for Location"""


class VerificationTokenIncludeFromLocationRecursive2(TypedDict, total=False):
    """Relational arguments for Location"""


class VerificationTokenIncludeFromLocationRecursive3(TypedDict, total=False):
    """Relational arguments for Location"""


class VerificationTokenIncludeFromLocationRecursive4(TypedDict, total=False):
    """Relational arguments for Location"""

    

class VerificationTokenArgsFromLocation(TypedDict, total=False):
    """Arguments for Location"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromLocationRecursive1(TypedDict, total=False):
    """Arguments for Location"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromLocationRecursive2(TypedDict, total=False):
    """Arguments for Location"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromLocationRecursive3(TypedDict, total=False):
    """Arguments for Location"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromLocationRecursive4(TypedDict, total=False):
    """Arguments for Location"""
    
    

class FindManyVerificationTokenArgsFromLocation(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromLocationRecursive1(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromLocationRecursive2(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromLocationRecursive3(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromLocationRecursive4(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class EventIncludeFromLocation(TypedDict, total=False):
    """Relational arguments for Location"""
    location: Union[bool, 'LocationArgsFromLocationRecursive1']
    community: Union[bool, 'CommunityArgsFromLocationRecursive1']
    starredBy: Union[bool, 'FindManyUserEventArgsFromLocationRecursive1']


class EventIncludeFromLocationRecursive1(TypedDict, total=False):
    """Relational arguments for Location"""
    location: Union[bool, 'LocationArgsFromLocationRecursive2']
    community: Union[bool, 'CommunityArgsFromLocationRecursive2']
    starredBy: Union[bool, 'FindManyUserEventArgsFromLocationRecursive2']


class EventIncludeFromLocationRecursive2(TypedDict, total=False):
    """Relational arguments for Location"""
    location: Union[bool, 'LocationArgsFromLocationRecursive3']
    community: Union[bool, 'CommunityArgsFromLocationRecursive3']
    starredBy: Union[bool, 'FindManyUserEventArgsFromLocationRecursive3']


class EventIncludeFromLocationRecursive3(TypedDict, total=False):
    """Relational arguments for Location"""
    location: Union[bool, 'LocationArgsFromLocationRecursive4']
    community: Union[bool, 'CommunityArgsFromLocationRecursive4']
    starredBy: Union[bool, 'FindManyUserEventArgsFromLocationRecursive4']


class EventIncludeFromLocationRecursive4(TypedDict, total=False):
    """Relational arguments for Location"""

    

class EventArgsFromLocation(TypedDict, total=False):
    """Arguments for Location"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromLocationRecursive1(TypedDict, total=False):
    """Arguments for Location"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromLocationRecursive2(TypedDict, total=False):
    """Arguments for Location"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromLocationRecursive3(TypedDict, total=False):
    """Arguments for Location"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromLocationRecursive4(TypedDict, total=False):
    """Arguments for Location"""
    
    

class FindManyEventArgsFromLocation(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromLocationRecursive1(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromLocationRecursive2(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromLocationRecursive3(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromLocationRecursive4(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class LocationIncludeFromLocation(TypedDict, total=False):
    """Relational arguments for Location"""
    events: Union[bool, 'FindManyEventArgsFromLocationRecursive1']


class LocationIncludeFromLocationRecursive1(TypedDict, total=False):
    """Relational arguments for Location"""
    events: Union[bool, 'FindManyEventArgsFromLocationRecursive2']


class LocationIncludeFromLocationRecursive2(TypedDict, total=False):
    """Relational arguments for Location"""
    events: Union[bool, 'FindManyEventArgsFromLocationRecursive3']


class LocationIncludeFromLocationRecursive3(TypedDict, total=False):
    """Relational arguments for Location"""
    events: Union[bool, 'FindManyEventArgsFromLocationRecursive4']


class LocationIncludeFromLocationRecursive4(TypedDict, total=False):
    """Relational arguments for Location"""

    

class LocationArgsFromLocation(TypedDict, total=False):
    """Arguments for Location"""
    include: 'LocationIncludeFromLocationRecursive1'


class LocationArgsFromLocationRecursive1(TypedDict, total=False):
    """Arguments for Location"""
    include: 'LocationIncludeFromLocationRecursive2'


class LocationArgsFromLocationRecursive2(TypedDict, total=False):
    """Arguments for Location"""
    include: 'LocationIncludeFromLocationRecursive3'


class LocationArgsFromLocationRecursive3(TypedDict, total=False):
    """Arguments for Location"""
    include: 'LocationIncludeFromLocationRecursive4'


class LocationArgsFromLocationRecursive4(TypedDict, total=False):
    """Arguments for Location"""
    
    

class FindManyLocationArgsFromLocation(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive1'


class FindManyLocationArgsFromLocationRecursive1(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive2'


class FindManyLocationArgsFromLocationRecursive2(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive3'


class FindManyLocationArgsFromLocationRecursive3(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive4'


class FindManyLocationArgsFromLocationRecursive4(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    
    

class CommunityIncludeFromLocation(TypedDict, total=False):
    """Relational arguments for Location"""
    events: Union[bool, 'FindManyEventArgsFromLocationRecursive1']


class CommunityIncludeFromLocationRecursive1(TypedDict, total=False):
    """Relational arguments for Location"""
    events: Union[bool, 'FindManyEventArgsFromLocationRecursive2']


class CommunityIncludeFromLocationRecursive2(TypedDict, total=False):
    """Relational arguments for Location"""
    events: Union[bool, 'FindManyEventArgsFromLocationRecursive3']


class CommunityIncludeFromLocationRecursive3(TypedDict, total=False):
    """Relational arguments for Location"""
    events: Union[bool, 'FindManyEventArgsFromLocationRecursive4']


class CommunityIncludeFromLocationRecursive4(TypedDict, total=False):
    """Relational arguments for Location"""

    

class CommunityArgsFromLocation(TypedDict, total=False):
    """Arguments for Location"""
    include: 'CommunityIncludeFromCommunityRecursive1'


class CommunityArgsFromLocationRecursive1(TypedDict, total=False):
    """Arguments for Location"""
    include: 'CommunityIncludeFromCommunityRecursive2'


class CommunityArgsFromLocationRecursive2(TypedDict, total=False):
    """Arguments for Location"""
    include: 'CommunityIncludeFromCommunityRecursive3'


class CommunityArgsFromLocationRecursive3(TypedDict, total=False):
    """Arguments for Location"""
    include: 'CommunityIncludeFromCommunityRecursive4'


class CommunityArgsFromLocationRecursive4(TypedDict, total=False):
    """Arguments for Location"""
    
    

class FindManyCommunityArgsFromLocation(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive1'


class FindManyCommunityArgsFromLocationRecursive1(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive2'


class FindManyCommunityArgsFromLocationRecursive2(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive3'


class FindManyCommunityArgsFromLocationRecursive3(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive4'


class FindManyCommunityArgsFromLocationRecursive4(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    
    

class UserEventIncludeFromLocation(TypedDict, total=False):
    """Relational arguments for Location"""
    user: Union[bool, 'UserArgsFromLocationRecursive1']
    event: Union[bool, 'EventArgsFromLocationRecursive1']


class UserEventIncludeFromLocationRecursive1(TypedDict, total=False):
    """Relational arguments for Location"""
    user: Union[bool, 'UserArgsFromLocationRecursive2']
    event: Union[bool, 'EventArgsFromLocationRecursive2']


class UserEventIncludeFromLocationRecursive2(TypedDict, total=False):
    """Relational arguments for Location"""
    user: Union[bool, 'UserArgsFromLocationRecursive3']
    event: Union[bool, 'EventArgsFromLocationRecursive3']


class UserEventIncludeFromLocationRecursive3(TypedDict, total=False):
    """Relational arguments for Location"""
    user: Union[bool, 'UserArgsFromLocationRecursive4']
    event: Union[bool, 'EventArgsFromLocationRecursive4']


class UserEventIncludeFromLocationRecursive4(TypedDict, total=False):
    """Relational arguments for Location"""

    

class UserEventArgsFromLocation(TypedDict, total=False):
    """Arguments for Location"""
    include: 'UserEventIncludeFromUserEventRecursive1'


class UserEventArgsFromLocationRecursive1(TypedDict, total=False):
    """Arguments for Location"""
    include: 'UserEventIncludeFromUserEventRecursive2'


class UserEventArgsFromLocationRecursive2(TypedDict, total=False):
    """Arguments for Location"""
    include: 'UserEventIncludeFromUserEventRecursive3'


class UserEventArgsFromLocationRecursive3(TypedDict, total=False):
    """Arguments for Location"""
    include: 'UserEventIncludeFromUserEventRecursive4'


class UserEventArgsFromLocationRecursive4(TypedDict, total=False):
    """Arguments for Location"""
    
    

class FindManyUserEventArgsFromLocation(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive1'


class FindManyUserEventArgsFromLocationRecursive1(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive2'


class FindManyUserEventArgsFromLocationRecursive2(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive3'


class FindManyUserEventArgsFromLocationRecursive3(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive4'


class FindManyUserEventArgsFromLocationRecursive4(TypedDict, total=False):
    """Arguments for Location"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    


FindManyLocationArgs = FindManyLocationArgsFromLocation
FindFirstLocationArgs = FindManyLocationArgsFromLocation


    

class LocationWhereInput(TypedDict, total=False):
    """Location arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    address: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    state: Union[_str, 'types.StringFilter']
    zip: Union[_str, 'types.StringFilter']
    events: 'EventListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['LocationWhereInputRecursive1', List['LocationWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['LocationWhereInputRecursive1']
    OR: List['LocationWhereInputRecursive1']
    NOT: List['LocationWhereInputRecursive1']


class LocationWhereInputRecursive1(TypedDict, total=False):
    """Location arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    address: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    state: Union[_str, 'types.StringFilter']
    zip: Union[_str, 'types.StringFilter']
    events: 'EventListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['LocationWhereInputRecursive2', List['LocationWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['LocationWhereInputRecursive2']
    OR: List['LocationWhereInputRecursive2']
    NOT: List['LocationWhereInputRecursive2']


class LocationWhereInputRecursive2(TypedDict, total=False):
    """Location arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    address: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    state: Union[_str, 'types.StringFilter']
    zip: Union[_str, 'types.StringFilter']
    events: 'EventListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['LocationWhereInputRecursive3', List['LocationWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['LocationWhereInputRecursive3']
    OR: List['LocationWhereInputRecursive3']
    NOT: List['LocationWhereInputRecursive3']


class LocationWhereInputRecursive3(TypedDict, total=False):
    """Location arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    address: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    state: Union[_str, 'types.StringFilter']
    zip: Union[_str, 'types.StringFilter']
    events: 'EventListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['LocationWhereInputRecursive4', List['LocationWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['LocationWhereInputRecursive4']
    OR: List['LocationWhereInputRecursive4']
    NOT: List['LocationWhereInputRecursive4']


class LocationWhereInputRecursive4(TypedDict, total=False):
    """Location arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    address: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    state: Union[_str, 'types.StringFilter']
    zip: Union[_str, 'types.StringFilter']
    events: 'EventListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Location types


    

class LocationScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Location arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    zip: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LocationScalarWhereWithAggregatesInputRecursive1']
    OR: List['LocationScalarWhereWithAggregatesInputRecursive1']
    NOT: List['LocationScalarWhereWithAggregatesInputRecursive1']


class LocationScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Location arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    zip: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LocationScalarWhereWithAggregatesInputRecursive2']
    OR: List['LocationScalarWhereWithAggregatesInputRecursive2']
    NOT: List['LocationScalarWhereWithAggregatesInputRecursive2']


class LocationScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Location arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    zip: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LocationScalarWhereWithAggregatesInputRecursive3']
    OR: List['LocationScalarWhereWithAggregatesInputRecursive3']
    NOT: List['LocationScalarWhereWithAggregatesInputRecursive3']


class LocationScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Location arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    zip: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LocationScalarWhereWithAggregatesInputRecursive4']
    OR: List['LocationScalarWhereWithAggregatesInputRecursive4']
    NOT: List['LocationScalarWhereWithAggregatesInputRecursive4']


class LocationScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Location arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    zip: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class LocationGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    address: _str
    city: _str
    state: _str
    zip: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'LocationSumAggregateOutput'
    _avg: 'LocationAvgAggregateOutput'
    _min: 'LocationMinAggregateOutput'
    _max: 'LocationMaxAggregateOutput'
    _count: 'LocationCountAggregateOutput'


class LocationAvgAggregateOutput(TypedDict, total=False):
    """Location output for aggregating averages"""


class LocationSumAggregateOutput(TypedDict, total=False):
    """Location output for aggregating sums"""


class LocationScalarAggregateOutput(TypedDict, total=False):
    """Location output including scalar fields"""
    id: _str
    name: _str
    address: _str
    city: _str
    state: _str
    zip: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


LocationMinAggregateOutput = LocationScalarAggregateOutput
LocationMaxAggregateOutput = LocationScalarAggregateOutput


class LocationMaxAggregateInput(TypedDict, total=False):
    """Location input for aggregating by max"""
    id: bool
    name: bool
    address: bool
    city: bool
    state: bool
    zip: bool
    createdAt: bool
    updatedAt: bool


class LocationMinAggregateInput(TypedDict, total=False):
    """Location input for aggregating by min"""
    id: bool
    name: bool
    address: bool
    city: bool
    state: bool
    zip: bool
    createdAt: bool
    updatedAt: bool


class LocationNumberAggregateInput(TypedDict, total=False):
    """Location input for aggregating numbers"""


LocationAvgAggregateInput = LocationNumberAggregateInput
LocationSumAggregateInput = LocationNumberAggregateInput


LocationCountAggregateInput = TypedDict(
    'LocationCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'address': bool,
        'city': bool,
        'state': bool,
        'zip': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

LocationCountAggregateOutput = TypedDict(
    'LocationCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'address': int,
        'city': int,
        'state': int,
        'zip': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


LocationKeys = Literal[
    'id',
    'name',
    'address',
    'city',
    'state',
    'zip',
    'events',
    'createdAt',
    'updatedAt',
]
LocationScalarFieldKeys = Literal[
    'id',
    'name',
    'address',
    'city',
    'state',
    'zip',
    'createdAt',
    'updatedAt',
]
LocationScalarFieldKeysT = TypeVar('LocationScalarFieldKeysT', bound=LocationScalarFieldKeys)

LocationRelationalFieldKeys = Literal[
        'events',
    ]

# Community types

class CommunityOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Community create method"""
    id: _str
    description: Optional[_str]
    url: Optional[_str]
    category: List[_str]
    events: 'EventCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class CommunityCreateInput(CommunityOptionalCreateInput):
    """Required arguments to the Community create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CommunityOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Community create method, without relations"""
    id: _str
    description: Optional[_str]
    url: Optional[_str]
    category: List[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class CommunityCreateWithoutRelationsInput(CommunityOptionalCreateWithoutRelationsInput):
    """Required arguments to the Community create method, without relations"""
    name: _str

class CommunityConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CommunityCreateWithoutRelationsInput'
    where: 'CommunityWhereUniqueInput'

class CommunityCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CommunityCreateWithoutRelationsInput'
    connect: 'CommunityWhereUniqueInput'
    connect_or_create: 'CommunityConnectOrCreateWithoutRelationsInput'


class CommunityCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CommunityCreateWithoutRelationsInput', List['CommunityCreateWithoutRelationsInput']]
    connect: Union['CommunityWhereUniqueInput', List['CommunityWhereUniqueInput']]
    connect_or_create: Union['CommunityConnectOrCreateWithoutRelationsInput', List['CommunityConnectOrCreateWithoutRelationsInput']]

_CommunityWhereUnique_id_Input = TypedDict(
    '_CommunityWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

CommunityWhereUniqueInput = _CommunityWhereUnique_id_Input


class CommunityUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    description: Optional[_str]
    url: Optional[_str]
    category: 'types.StringListUpdate'
    events: 'EventUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class CommunityUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    description: Optional[_str]
    url: Optional[_str]
    category: 'types.StringListUpdate'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class CommunityUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CommunityCreateWithoutRelationsInput']
    connect: List['CommunityWhereUniqueInput']
    connect_or_create: List['CommunityConnectOrCreateWithoutRelationsInput']
    set: List['CommunityWhereUniqueInput']
    disconnect: List['CommunityWhereUniqueInput']
    delete: List['CommunityWhereUniqueInput']

    # TODO
    # update: List['CommunityUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CommunityUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CommunityScalarWhereInput']
    # upsert: List['CommunityUpserteWithWhereUniqueWithoutRelationsInput']


class CommunityUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CommunityCreateWithoutRelationsInput'
    connect: 'CommunityWhereUniqueInput'
    connect_or_create: 'CommunityConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CommunityUpdateInput'
    # upsert: 'CommunityUpsertWithoutRelationsInput'


class CommunityUpsertInput(TypedDict):
    create: 'CommunityCreateInput'
    update: 'CommunityUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Community_id_OrderByInput = TypedDict(
    '_Community_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Community_name_OrderByInput = TypedDict(
    '_Community_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Community_description_OrderByInput = TypedDict(
    '_Community_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Community_url_OrderByInput = TypedDict(
    '_Community_url_OrderByInput',
    {
        'url': 'SortOrder',
    },
    total=True
)

_Community_category_OrderByInput = TypedDict(
    '_Community_category_OrderByInput',
    {
        'category': 'SortOrder',
    },
    total=True
)

_Community_createdAt_OrderByInput = TypedDict(
    '_Community_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Community_updatedAt_OrderByInput = TypedDict(
    '_Community_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Community_RelevanceInner = TypedDict(
    '_Community_RelevanceInner',
    {
        'fields': 'List[CommunityScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Community_RelevanceOrderByInput = TypedDict(
    '_Community_RelevanceOrderByInput',
    {
        '_relevance': '_Community_RelevanceInner',
    },
    total=True
)

CommunityOrderByInput = Union[
    '_Community_id_OrderByInput',
    '_Community_name_OrderByInput',
    '_Community_description_OrderByInput',
    '_Community_url_OrderByInput',
    '_Community_category_OrderByInput',
    '_Community_createdAt_OrderByInput',
    '_Community_updatedAt_OrderByInput',
    '_Community_RelevanceOrderByInput',
]



# recursive Community types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CommunityRelationFilter = TypedDict(
    'CommunityRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CommunityListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CommunityInclude(TypedDict, total=False):
    """Community relational arguments"""
    events: Union[bool, 'FindManyEventArgsFromCommunity']


    

class UserIncludeFromCommunity(TypedDict, total=False):
    """Relational arguments for Community"""
    accounts: Union[bool, 'FindManyAccountArgsFromCommunityRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromCommunityRecursive1']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromCommunityRecursive1']


class UserIncludeFromCommunityRecursive1(TypedDict, total=False):
    """Relational arguments for Community"""
    accounts: Union[bool, 'FindManyAccountArgsFromCommunityRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromCommunityRecursive2']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromCommunityRecursive2']


class UserIncludeFromCommunityRecursive2(TypedDict, total=False):
    """Relational arguments for Community"""
    accounts: Union[bool, 'FindManyAccountArgsFromCommunityRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromCommunityRecursive3']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromCommunityRecursive3']


class UserIncludeFromCommunityRecursive3(TypedDict, total=False):
    """Relational arguments for Community"""
    accounts: Union[bool, 'FindManyAccountArgsFromCommunityRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromCommunityRecursive4']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromCommunityRecursive4']


class UserIncludeFromCommunityRecursive4(TypedDict, total=False):
    """Relational arguments for Community"""

    

class UserArgsFromCommunity(TypedDict, total=False):
    """Arguments for Community"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCommunityRecursive1(TypedDict, total=False):
    """Arguments for Community"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCommunityRecursive2(TypedDict, total=False):
    """Arguments for Community"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCommunityRecursive3(TypedDict, total=False):
    """Arguments for Community"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCommunityRecursive4(TypedDict, total=False):
    """Arguments for Community"""
    
    

class FindManyUserArgsFromCommunity(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCommunityRecursive1(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCommunityRecursive2(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCommunityRecursive3(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCommunityRecursive4(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromCommunity(TypedDict, total=False):
    """Relational arguments for Community"""
    user: Union[bool, 'UserArgsFromCommunityRecursive1']


class AccountIncludeFromCommunityRecursive1(TypedDict, total=False):
    """Relational arguments for Community"""
    user: Union[bool, 'UserArgsFromCommunityRecursive2']


class AccountIncludeFromCommunityRecursive2(TypedDict, total=False):
    """Relational arguments for Community"""
    user: Union[bool, 'UserArgsFromCommunityRecursive3']


class AccountIncludeFromCommunityRecursive3(TypedDict, total=False):
    """Relational arguments for Community"""
    user: Union[bool, 'UserArgsFromCommunityRecursive4']


class AccountIncludeFromCommunityRecursive4(TypedDict, total=False):
    """Relational arguments for Community"""

    

class AccountArgsFromCommunity(TypedDict, total=False):
    """Arguments for Community"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromCommunityRecursive1(TypedDict, total=False):
    """Arguments for Community"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromCommunityRecursive2(TypedDict, total=False):
    """Arguments for Community"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromCommunityRecursive3(TypedDict, total=False):
    """Arguments for Community"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromCommunityRecursive4(TypedDict, total=False):
    """Arguments for Community"""
    
    

class FindManyAccountArgsFromCommunity(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromCommunityRecursive1(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromCommunityRecursive2(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromCommunityRecursive3(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromCommunityRecursive4(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromCommunity(TypedDict, total=False):
    """Relational arguments for Community"""
    user: Union[bool, 'UserArgsFromCommunityRecursive1']


class SessionIncludeFromCommunityRecursive1(TypedDict, total=False):
    """Relational arguments for Community"""
    user: Union[bool, 'UserArgsFromCommunityRecursive2']


class SessionIncludeFromCommunityRecursive2(TypedDict, total=False):
    """Relational arguments for Community"""
    user: Union[bool, 'UserArgsFromCommunityRecursive3']


class SessionIncludeFromCommunityRecursive3(TypedDict, total=False):
    """Relational arguments for Community"""
    user: Union[bool, 'UserArgsFromCommunityRecursive4']


class SessionIncludeFromCommunityRecursive4(TypedDict, total=False):
    """Relational arguments for Community"""

    

class SessionArgsFromCommunity(TypedDict, total=False):
    """Arguments for Community"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromCommunityRecursive1(TypedDict, total=False):
    """Arguments for Community"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromCommunityRecursive2(TypedDict, total=False):
    """Arguments for Community"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromCommunityRecursive3(TypedDict, total=False):
    """Arguments for Community"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromCommunityRecursive4(TypedDict, total=False):
    """Arguments for Community"""
    
    

class FindManySessionArgsFromCommunity(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromCommunityRecursive1(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromCommunityRecursive2(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromCommunityRecursive3(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromCommunityRecursive4(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromCommunity(TypedDict, total=False):
    """Relational arguments for Community"""


class VerificationTokenIncludeFromCommunityRecursive1(TypedDict, total=False):
    """Relational arguments for Community"""


class VerificationTokenIncludeFromCommunityRecursive2(TypedDict, total=False):
    """Relational arguments for Community"""


class VerificationTokenIncludeFromCommunityRecursive3(TypedDict, total=False):
    """Relational arguments for Community"""


class VerificationTokenIncludeFromCommunityRecursive4(TypedDict, total=False):
    """Relational arguments for Community"""

    

class VerificationTokenArgsFromCommunity(TypedDict, total=False):
    """Arguments for Community"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromCommunityRecursive1(TypedDict, total=False):
    """Arguments for Community"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromCommunityRecursive2(TypedDict, total=False):
    """Arguments for Community"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromCommunityRecursive3(TypedDict, total=False):
    """Arguments for Community"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromCommunityRecursive4(TypedDict, total=False):
    """Arguments for Community"""
    
    

class FindManyVerificationTokenArgsFromCommunity(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromCommunityRecursive1(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromCommunityRecursive2(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromCommunityRecursive3(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromCommunityRecursive4(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class EventIncludeFromCommunity(TypedDict, total=False):
    """Relational arguments for Community"""
    location: Union[bool, 'LocationArgsFromCommunityRecursive1']
    community: Union[bool, 'CommunityArgsFromCommunityRecursive1']
    starredBy: Union[bool, 'FindManyUserEventArgsFromCommunityRecursive1']


class EventIncludeFromCommunityRecursive1(TypedDict, total=False):
    """Relational arguments for Community"""
    location: Union[bool, 'LocationArgsFromCommunityRecursive2']
    community: Union[bool, 'CommunityArgsFromCommunityRecursive2']
    starredBy: Union[bool, 'FindManyUserEventArgsFromCommunityRecursive2']


class EventIncludeFromCommunityRecursive2(TypedDict, total=False):
    """Relational arguments for Community"""
    location: Union[bool, 'LocationArgsFromCommunityRecursive3']
    community: Union[bool, 'CommunityArgsFromCommunityRecursive3']
    starredBy: Union[bool, 'FindManyUserEventArgsFromCommunityRecursive3']


class EventIncludeFromCommunityRecursive3(TypedDict, total=False):
    """Relational arguments for Community"""
    location: Union[bool, 'LocationArgsFromCommunityRecursive4']
    community: Union[bool, 'CommunityArgsFromCommunityRecursive4']
    starredBy: Union[bool, 'FindManyUserEventArgsFromCommunityRecursive4']


class EventIncludeFromCommunityRecursive4(TypedDict, total=False):
    """Relational arguments for Community"""

    

class EventArgsFromCommunity(TypedDict, total=False):
    """Arguments for Community"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromCommunityRecursive1(TypedDict, total=False):
    """Arguments for Community"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromCommunityRecursive2(TypedDict, total=False):
    """Arguments for Community"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromCommunityRecursive3(TypedDict, total=False):
    """Arguments for Community"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromCommunityRecursive4(TypedDict, total=False):
    """Arguments for Community"""
    
    

class FindManyEventArgsFromCommunity(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromCommunityRecursive1(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromCommunityRecursive2(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromCommunityRecursive3(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromCommunityRecursive4(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class LocationIncludeFromCommunity(TypedDict, total=False):
    """Relational arguments for Community"""
    events: Union[bool, 'FindManyEventArgsFromCommunityRecursive1']


class LocationIncludeFromCommunityRecursive1(TypedDict, total=False):
    """Relational arguments for Community"""
    events: Union[bool, 'FindManyEventArgsFromCommunityRecursive2']


class LocationIncludeFromCommunityRecursive2(TypedDict, total=False):
    """Relational arguments for Community"""
    events: Union[bool, 'FindManyEventArgsFromCommunityRecursive3']


class LocationIncludeFromCommunityRecursive3(TypedDict, total=False):
    """Relational arguments for Community"""
    events: Union[bool, 'FindManyEventArgsFromCommunityRecursive4']


class LocationIncludeFromCommunityRecursive4(TypedDict, total=False):
    """Relational arguments for Community"""

    

class LocationArgsFromCommunity(TypedDict, total=False):
    """Arguments for Community"""
    include: 'LocationIncludeFromLocationRecursive1'


class LocationArgsFromCommunityRecursive1(TypedDict, total=False):
    """Arguments for Community"""
    include: 'LocationIncludeFromLocationRecursive2'


class LocationArgsFromCommunityRecursive2(TypedDict, total=False):
    """Arguments for Community"""
    include: 'LocationIncludeFromLocationRecursive3'


class LocationArgsFromCommunityRecursive3(TypedDict, total=False):
    """Arguments for Community"""
    include: 'LocationIncludeFromLocationRecursive4'


class LocationArgsFromCommunityRecursive4(TypedDict, total=False):
    """Arguments for Community"""
    
    

class FindManyLocationArgsFromCommunity(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive1'


class FindManyLocationArgsFromCommunityRecursive1(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive2'


class FindManyLocationArgsFromCommunityRecursive2(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive3'


class FindManyLocationArgsFromCommunityRecursive3(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive4'


class FindManyLocationArgsFromCommunityRecursive4(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    
    

class CommunityIncludeFromCommunity(TypedDict, total=False):
    """Relational arguments for Community"""
    events: Union[bool, 'FindManyEventArgsFromCommunityRecursive1']


class CommunityIncludeFromCommunityRecursive1(TypedDict, total=False):
    """Relational arguments for Community"""
    events: Union[bool, 'FindManyEventArgsFromCommunityRecursive2']


class CommunityIncludeFromCommunityRecursive2(TypedDict, total=False):
    """Relational arguments for Community"""
    events: Union[bool, 'FindManyEventArgsFromCommunityRecursive3']


class CommunityIncludeFromCommunityRecursive3(TypedDict, total=False):
    """Relational arguments for Community"""
    events: Union[bool, 'FindManyEventArgsFromCommunityRecursive4']


class CommunityIncludeFromCommunityRecursive4(TypedDict, total=False):
    """Relational arguments for Community"""

    

class CommunityArgsFromCommunity(TypedDict, total=False):
    """Arguments for Community"""
    include: 'CommunityIncludeFromCommunityRecursive1'


class CommunityArgsFromCommunityRecursive1(TypedDict, total=False):
    """Arguments for Community"""
    include: 'CommunityIncludeFromCommunityRecursive2'


class CommunityArgsFromCommunityRecursive2(TypedDict, total=False):
    """Arguments for Community"""
    include: 'CommunityIncludeFromCommunityRecursive3'


class CommunityArgsFromCommunityRecursive3(TypedDict, total=False):
    """Arguments for Community"""
    include: 'CommunityIncludeFromCommunityRecursive4'


class CommunityArgsFromCommunityRecursive4(TypedDict, total=False):
    """Arguments for Community"""
    
    

class FindManyCommunityArgsFromCommunity(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive1'


class FindManyCommunityArgsFromCommunityRecursive1(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive2'


class FindManyCommunityArgsFromCommunityRecursive2(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive3'


class FindManyCommunityArgsFromCommunityRecursive3(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive4'


class FindManyCommunityArgsFromCommunityRecursive4(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    
    

class UserEventIncludeFromCommunity(TypedDict, total=False):
    """Relational arguments for Community"""
    user: Union[bool, 'UserArgsFromCommunityRecursive1']
    event: Union[bool, 'EventArgsFromCommunityRecursive1']


class UserEventIncludeFromCommunityRecursive1(TypedDict, total=False):
    """Relational arguments for Community"""
    user: Union[bool, 'UserArgsFromCommunityRecursive2']
    event: Union[bool, 'EventArgsFromCommunityRecursive2']


class UserEventIncludeFromCommunityRecursive2(TypedDict, total=False):
    """Relational arguments for Community"""
    user: Union[bool, 'UserArgsFromCommunityRecursive3']
    event: Union[bool, 'EventArgsFromCommunityRecursive3']


class UserEventIncludeFromCommunityRecursive3(TypedDict, total=False):
    """Relational arguments for Community"""
    user: Union[bool, 'UserArgsFromCommunityRecursive4']
    event: Union[bool, 'EventArgsFromCommunityRecursive4']


class UserEventIncludeFromCommunityRecursive4(TypedDict, total=False):
    """Relational arguments for Community"""

    

class UserEventArgsFromCommunity(TypedDict, total=False):
    """Arguments for Community"""
    include: 'UserEventIncludeFromUserEventRecursive1'


class UserEventArgsFromCommunityRecursive1(TypedDict, total=False):
    """Arguments for Community"""
    include: 'UserEventIncludeFromUserEventRecursive2'


class UserEventArgsFromCommunityRecursive2(TypedDict, total=False):
    """Arguments for Community"""
    include: 'UserEventIncludeFromUserEventRecursive3'


class UserEventArgsFromCommunityRecursive3(TypedDict, total=False):
    """Arguments for Community"""
    include: 'UserEventIncludeFromUserEventRecursive4'


class UserEventArgsFromCommunityRecursive4(TypedDict, total=False):
    """Arguments for Community"""
    
    

class FindManyUserEventArgsFromCommunity(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive1'


class FindManyUserEventArgsFromCommunityRecursive1(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive2'


class FindManyUserEventArgsFromCommunityRecursive2(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive3'


class FindManyUserEventArgsFromCommunityRecursive3(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive4'


class FindManyUserEventArgsFromCommunityRecursive4(TypedDict, total=False):
    """Arguments for Community"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    


FindManyCommunityArgs = FindManyCommunityArgsFromCommunity
FindFirstCommunityArgs = FindManyCommunityArgsFromCommunity


    

class CommunityWhereInput(TypedDict, total=False):
    """Community arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    category: 'types.StringListFilter'
    events: 'EventListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['CommunityWhereInputRecursive1', List['CommunityWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CommunityWhereInputRecursive1']
    OR: List['CommunityWhereInputRecursive1']
    NOT: List['CommunityWhereInputRecursive1']


class CommunityWhereInputRecursive1(TypedDict, total=False):
    """Community arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    category: 'types.StringListFilter'
    events: 'EventListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['CommunityWhereInputRecursive2', List['CommunityWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CommunityWhereInputRecursive2']
    OR: List['CommunityWhereInputRecursive2']
    NOT: List['CommunityWhereInputRecursive2']


class CommunityWhereInputRecursive2(TypedDict, total=False):
    """Community arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    category: 'types.StringListFilter'
    events: 'EventListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['CommunityWhereInputRecursive3', List['CommunityWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CommunityWhereInputRecursive3']
    OR: List['CommunityWhereInputRecursive3']
    NOT: List['CommunityWhereInputRecursive3']


class CommunityWhereInputRecursive3(TypedDict, total=False):
    """Community arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    category: 'types.StringListFilter'
    events: 'EventListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['CommunityWhereInputRecursive4', List['CommunityWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CommunityWhereInputRecursive4']
    OR: List['CommunityWhereInputRecursive4']
    NOT: List['CommunityWhereInputRecursive4']


class CommunityWhereInputRecursive4(TypedDict, total=False):
    """Community arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    category: 'types.StringListFilter'
    events: 'EventListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Community types


    

class CommunityScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Community arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    category: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CommunityScalarWhereWithAggregatesInputRecursive1']
    OR: List['CommunityScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CommunityScalarWhereWithAggregatesInputRecursive1']


class CommunityScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Community arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    category: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CommunityScalarWhereWithAggregatesInputRecursive2']
    OR: List['CommunityScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CommunityScalarWhereWithAggregatesInputRecursive2']


class CommunityScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Community arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    category: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CommunityScalarWhereWithAggregatesInputRecursive3']
    OR: List['CommunityScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CommunityScalarWhereWithAggregatesInputRecursive3']


class CommunityScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Community arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    category: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CommunityScalarWhereWithAggregatesInputRecursive4']
    OR: List['CommunityScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CommunityScalarWhereWithAggregatesInputRecursive4']


class CommunityScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Community arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    category: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class CommunityGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    description: _str
    url: _str
    category: List[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'CommunitySumAggregateOutput'
    _avg: 'CommunityAvgAggregateOutput'
    _min: 'CommunityMinAggregateOutput'
    _max: 'CommunityMaxAggregateOutput'
    _count: 'CommunityCountAggregateOutput'


class CommunityAvgAggregateOutput(TypedDict, total=False):
    """Community output for aggregating averages"""


class CommunitySumAggregateOutput(TypedDict, total=False):
    """Community output for aggregating sums"""


class CommunityScalarAggregateOutput(TypedDict, total=False):
    """Community output including scalar fields"""
    id: _str
    name: _str
    description: _str
    url: _str
    category: List[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


CommunityMinAggregateOutput = CommunityScalarAggregateOutput
CommunityMaxAggregateOutput = CommunityScalarAggregateOutput


class CommunityMaxAggregateInput(TypedDict, total=False):
    """Community input for aggregating by max"""
    id: bool
    name: bool
    description: bool
    url: bool
    category: bool
    createdAt: bool
    updatedAt: bool


class CommunityMinAggregateInput(TypedDict, total=False):
    """Community input for aggregating by min"""
    id: bool
    name: bool
    description: bool
    url: bool
    category: bool
    createdAt: bool
    updatedAt: bool


class CommunityNumberAggregateInput(TypedDict, total=False):
    """Community input for aggregating numbers"""


CommunityAvgAggregateInput = CommunityNumberAggregateInput
CommunitySumAggregateInput = CommunityNumberAggregateInput


CommunityCountAggregateInput = TypedDict(
    'CommunityCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        'url': bool,
        'category': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

CommunityCountAggregateOutput = TypedDict(
    'CommunityCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        'url': int,
        'category': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


CommunityKeys = Literal[
    'id',
    'name',
    'description',
    'url',
    'category',
    'events',
    'createdAt',
    'updatedAt',
]
CommunityScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
    'url',
    'category',
    'createdAt',
    'updatedAt',
]
CommunityScalarFieldKeysT = TypeVar('CommunityScalarFieldKeysT', bound=CommunityScalarFieldKeys)

CommunityRelationalFieldKeys = Literal[
        'events',
    ]

# UserEvent types

class UserEventOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UserEvent create method"""
    id: _str
    userId: _str
    eventId: _str
    starredAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'
    event: 'EventCreateNestedWithoutRelationsInput'


class UserEventCreateInput(UserEventOptionalCreateInput):
    """Required arguments to the UserEvent create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserEventOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UserEvent create method, without relations"""
    id: _str
    userId: _str
    eventId: _str
    starredAt: datetime.datetime


class UserEventCreateWithoutRelationsInput(UserEventOptionalCreateWithoutRelationsInput):
    """Required arguments to the UserEvent create method, without relations"""

class UserEventConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserEventCreateWithoutRelationsInput'
    where: 'UserEventWhereUniqueInput'

class UserEventCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserEventCreateWithoutRelationsInput'
    connect: 'UserEventWhereUniqueInput'
    connect_or_create: 'UserEventConnectOrCreateWithoutRelationsInput'


class UserEventCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserEventCreateWithoutRelationsInput', List['UserEventCreateWithoutRelationsInput']]
    connect: Union['UserEventWhereUniqueInput', List['UserEventWhereUniqueInput']]
    connect_or_create: Union['UserEventConnectOrCreateWithoutRelationsInput', List['UserEventConnectOrCreateWithoutRelationsInput']]

_UserEventWhereUnique_id_Input = TypedDict(
    '_UserEventWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserEventCompounduserId_eventIdKeyInner = TypedDict(
    '_UserEventCompounduserId_eventIdKeyInner',
    {
        'userId': '_str',
        'eventId': '_str',
    },
    total=True
)

_UserEventCompounduserId_eventIdKey = TypedDict(
    '_UserEventCompounduserId_eventIdKey',
    {
        'userId_eventId': '_UserEventCompounduserId_eventIdKeyInner',
    },
    total=True
)

UserEventWhereUniqueInput = Union[
    '_UserEventWhereUnique_id_Input',
    '_UserEventCompounduserId_eventIdKey',
]


class UserEventUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    starredAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    event: 'EventUpdateOneWithoutRelationsInput'


class UserEventUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    starredAt: datetime.datetime


class UserEventUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserEventCreateWithoutRelationsInput']
    connect: List['UserEventWhereUniqueInput']
    connect_or_create: List['UserEventConnectOrCreateWithoutRelationsInput']
    set: List['UserEventWhereUniqueInput']
    disconnect: List['UserEventWhereUniqueInput']
    delete: List['UserEventWhereUniqueInput']

    # TODO
    # update: List['UserEventUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserEventUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserEventScalarWhereInput']
    # upsert: List['UserEventUpserteWithWhereUniqueWithoutRelationsInput']


class UserEventUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserEventCreateWithoutRelationsInput'
    connect: 'UserEventWhereUniqueInput'
    connect_or_create: 'UserEventConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserEventUpdateInput'
    # upsert: 'UserEventUpsertWithoutRelationsInput'


class UserEventUpsertInput(TypedDict):
    create: 'UserEventCreateInput'
    update: 'UserEventUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UserEvent_id_OrderByInput = TypedDict(
    '_UserEvent_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_UserEvent_userId_OrderByInput = TypedDict(
    '_UserEvent_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_UserEvent_eventId_OrderByInput = TypedDict(
    '_UserEvent_eventId_OrderByInput',
    {
        'eventId': 'SortOrder',
    },
    total=True
)

_UserEvent_starredAt_OrderByInput = TypedDict(
    '_UserEvent_starredAt_OrderByInput',
    {
        'starredAt': 'SortOrder',
    },
    total=True
)

_UserEvent_RelevanceInner = TypedDict(
    '_UserEvent_RelevanceInner',
    {
        'fields': 'List[UserEventScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_UserEvent_RelevanceOrderByInput = TypedDict(
    '_UserEvent_RelevanceOrderByInput',
    {
        '_relevance': '_UserEvent_RelevanceInner',
    },
    total=True
)

UserEventOrderByInput = Union[
    '_UserEvent_id_OrderByInput',
    '_UserEvent_userId_OrderByInput',
    '_UserEvent_eventId_OrderByInput',
    '_UserEvent_starredAt_OrderByInput',
    '_UserEvent_RelevanceOrderByInput',
]



# recursive UserEvent types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserEventRelationFilter = TypedDict(
    'UserEventRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserEventListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserEventInclude(TypedDict, total=False):
    """UserEvent relational arguments"""
    user: Union[bool, 'UserArgsFromUserEvent']
    event: Union[bool, 'EventArgsFromUserEvent']


    

class UserIncludeFromUserEvent(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserEventRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromUserEventRecursive1']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromUserEventRecursive1']


class UserIncludeFromUserEventRecursive1(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserEventRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromUserEventRecursive2']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromUserEventRecursive2']


class UserIncludeFromUserEventRecursive2(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserEventRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromUserEventRecursive3']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromUserEventRecursive3']


class UserIncludeFromUserEventRecursive3(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserEventRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromUserEventRecursive4']
    starredEvents: Union[bool, 'FindManyUserEventArgsFromUserEventRecursive4']


class UserIncludeFromUserEventRecursive4(TypedDict, total=False):
    """Relational arguments for UserEvent"""

    

class UserArgsFromUserEvent(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserEventRecursive1(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserEventRecursive2(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserEventRecursive3(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserEventRecursive4(TypedDict, total=False):
    """Arguments for UserEvent"""
    
    

class FindManyUserArgsFromUserEvent(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserEventRecursive1(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserEventRecursive2(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserEventRecursive3(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserEventRecursive4(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromUserEvent(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    user: Union[bool, 'UserArgsFromUserEventRecursive1']


class AccountIncludeFromUserEventRecursive1(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    user: Union[bool, 'UserArgsFromUserEventRecursive2']


class AccountIncludeFromUserEventRecursive2(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    user: Union[bool, 'UserArgsFromUserEventRecursive3']


class AccountIncludeFromUserEventRecursive3(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    user: Union[bool, 'UserArgsFromUserEventRecursive4']


class AccountIncludeFromUserEventRecursive4(TypedDict, total=False):
    """Relational arguments for UserEvent"""

    

class AccountArgsFromUserEvent(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromUserEventRecursive1(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromUserEventRecursive2(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromUserEventRecursive3(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromUserEventRecursive4(TypedDict, total=False):
    """Arguments for UserEvent"""
    
    

class FindManyAccountArgsFromUserEvent(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromUserEventRecursive1(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromUserEventRecursive2(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromUserEventRecursive3(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromUserEventRecursive4(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromUserEvent(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    user: Union[bool, 'UserArgsFromUserEventRecursive1']


class SessionIncludeFromUserEventRecursive1(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    user: Union[bool, 'UserArgsFromUserEventRecursive2']


class SessionIncludeFromUserEventRecursive2(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    user: Union[bool, 'UserArgsFromUserEventRecursive3']


class SessionIncludeFromUserEventRecursive3(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    user: Union[bool, 'UserArgsFromUserEventRecursive4']


class SessionIncludeFromUserEventRecursive4(TypedDict, total=False):
    """Relational arguments for UserEvent"""

    

class SessionArgsFromUserEvent(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserEventRecursive1(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserEventRecursive2(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserEventRecursive3(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserEventRecursive4(TypedDict, total=False):
    """Arguments for UserEvent"""
    
    

class FindManySessionArgsFromUserEvent(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserEventRecursive1(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserEventRecursive2(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserEventRecursive3(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserEventRecursive4(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromUserEvent(TypedDict, total=False):
    """Relational arguments for UserEvent"""


class VerificationTokenIncludeFromUserEventRecursive1(TypedDict, total=False):
    """Relational arguments for UserEvent"""


class VerificationTokenIncludeFromUserEventRecursive2(TypedDict, total=False):
    """Relational arguments for UserEvent"""


class VerificationTokenIncludeFromUserEventRecursive3(TypedDict, total=False):
    """Relational arguments for UserEvent"""


class VerificationTokenIncludeFromUserEventRecursive4(TypedDict, total=False):
    """Relational arguments for UserEvent"""

    

class VerificationTokenArgsFromUserEvent(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromUserEventRecursive1(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromUserEventRecursive2(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromUserEventRecursive3(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromUserEventRecursive4(TypedDict, total=False):
    """Arguments for UserEvent"""
    
    

class FindManyVerificationTokenArgsFromUserEvent(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromUserEventRecursive1(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromUserEventRecursive2(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromUserEventRecursive3(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromUserEventRecursive4(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class EventIncludeFromUserEvent(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    location: Union[bool, 'LocationArgsFromUserEventRecursive1']
    community: Union[bool, 'CommunityArgsFromUserEventRecursive1']
    starredBy: Union[bool, 'FindManyUserEventArgsFromUserEventRecursive1']


class EventIncludeFromUserEventRecursive1(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    location: Union[bool, 'LocationArgsFromUserEventRecursive2']
    community: Union[bool, 'CommunityArgsFromUserEventRecursive2']
    starredBy: Union[bool, 'FindManyUserEventArgsFromUserEventRecursive2']


class EventIncludeFromUserEventRecursive2(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    location: Union[bool, 'LocationArgsFromUserEventRecursive3']
    community: Union[bool, 'CommunityArgsFromUserEventRecursive3']
    starredBy: Union[bool, 'FindManyUserEventArgsFromUserEventRecursive3']


class EventIncludeFromUserEventRecursive3(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    location: Union[bool, 'LocationArgsFromUserEventRecursive4']
    community: Union[bool, 'CommunityArgsFromUserEventRecursive4']
    starredBy: Union[bool, 'FindManyUserEventArgsFromUserEventRecursive4']


class EventIncludeFromUserEventRecursive4(TypedDict, total=False):
    """Relational arguments for UserEvent"""

    

class EventArgsFromUserEvent(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromUserEventRecursive1(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromUserEventRecursive2(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromUserEventRecursive3(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromUserEventRecursive4(TypedDict, total=False):
    """Arguments for UserEvent"""
    
    

class FindManyEventArgsFromUserEvent(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromUserEventRecursive1(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromUserEventRecursive2(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromUserEventRecursive3(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromUserEventRecursive4(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class LocationIncludeFromUserEvent(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    events: Union[bool, 'FindManyEventArgsFromUserEventRecursive1']


class LocationIncludeFromUserEventRecursive1(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    events: Union[bool, 'FindManyEventArgsFromUserEventRecursive2']


class LocationIncludeFromUserEventRecursive2(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    events: Union[bool, 'FindManyEventArgsFromUserEventRecursive3']


class LocationIncludeFromUserEventRecursive3(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    events: Union[bool, 'FindManyEventArgsFromUserEventRecursive4']


class LocationIncludeFromUserEventRecursive4(TypedDict, total=False):
    """Relational arguments for UserEvent"""

    

class LocationArgsFromUserEvent(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'LocationIncludeFromLocationRecursive1'


class LocationArgsFromUserEventRecursive1(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'LocationIncludeFromLocationRecursive2'


class LocationArgsFromUserEventRecursive2(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'LocationIncludeFromLocationRecursive3'


class LocationArgsFromUserEventRecursive3(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'LocationIncludeFromLocationRecursive4'


class LocationArgsFromUserEventRecursive4(TypedDict, total=False):
    """Arguments for UserEvent"""
    
    

class FindManyLocationArgsFromUserEvent(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive1'


class FindManyLocationArgsFromUserEventRecursive1(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive2'


class FindManyLocationArgsFromUserEventRecursive2(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive3'


class FindManyLocationArgsFromUserEventRecursive3(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    include: 'LocationIncludeFromLocationRecursive4'


class FindManyLocationArgsFromUserEventRecursive4(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['LocationOrderByInput', List['LocationOrderByInput']]
    where: 'LocationWhereInput'
    cursor: 'LocationWhereUniqueInput'
    distinct: List['LocationScalarFieldKeys']
    
    

class CommunityIncludeFromUserEvent(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    events: Union[bool, 'FindManyEventArgsFromUserEventRecursive1']


class CommunityIncludeFromUserEventRecursive1(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    events: Union[bool, 'FindManyEventArgsFromUserEventRecursive2']


class CommunityIncludeFromUserEventRecursive2(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    events: Union[bool, 'FindManyEventArgsFromUserEventRecursive3']


class CommunityIncludeFromUserEventRecursive3(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    events: Union[bool, 'FindManyEventArgsFromUserEventRecursive4']


class CommunityIncludeFromUserEventRecursive4(TypedDict, total=False):
    """Relational arguments for UserEvent"""

    

class CommunityArgsFromUserEvent(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'CommunityIncludeFromCommunityRecursive1'


class CommunityArgsFromUserEventRecursive1(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'CommunityIncludeFromCommunityRecursive2'


class CommunityArgsFromUserEventRecursive2(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'CommunityIncludeFromCommunityRecursive3'


class CommunityArgsFromUserEventRecursive3(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'CommunityIncludeFromCommunityRecursive4'


class CommunityArgsFromUserEventRecursive4(TypedDict, total=False):
    """Arguments for UserEvent"""
    
    

class FindManyCommunityArgsFromUserEvent(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive1'


class FindManyCommunityArgsFromUserEventRecursive1(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive2'


class FindManyCommunityArgsFromUserEventRecursive2(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive3'


class FindManyCommunityArgsFromUserEventRecursive3(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    include: 'CommunityIncludeFromCommunityRecursive4'


class FindManyCommunityArgsFromUserEventRecursive4(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['CommunityOrderByInput', List['CommunityOrderByInput']]
    where: 'CommunityWhereInput'
    cursor: 'CommunityWhereUniqueInput'
    distinct: List['CommunityScalarFieldKeys']
    
    

class UserEventIncludeFromUserEvent(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    user: Union[bool, 'UserArgsFromUserEventRecursive1']
    event: Union[bool, 'EventArgsFromUserEventRecursive1']


class UserEventIncludeFromUserEventRecursive1(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    user: Union[bool, 'UserArgsFromUserEventRecursive2']
    event: Union[bool, 'EventArgsFromUserEventRecursive2']


class UserEventIncludeFromUserEventRecursive2(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    user: Union[bool, 'UserArgsFromUserEventRecursive3']
    event: Union[bool, 'EventArgsFromUserEventRecursive3']


class UserEventIncludeFromUserEventRecursive3(TypedDict, total=False):
    """Relational arguments for UserEvent"""
    user: Union[bool, 'UserArgsFromUserEventRecursive4']
    event: Union[bool, 'EventArgsFromUserEventRecursive4']


class UserEventIncludeFromUserEventRecursive4(TypedDict, total=False):
    """Relational arguments for UserEvent"""

    

class UserEventArgsFromUserEvent(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'UserEventIncludeFromUserEventRecursive1'


class UserEventArgsFromUserEventRecursive1(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'UserEventIncludeFromUserEventRecursive2'


class UserEventArgsFromUserEventRecursive2(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'UserEventIncludeFromUserEventRecursive3'


class UserEventArgsFromUserEventRecursive3(TypedDict, total=False):
    """Arguments for UserEvent"""
    include: 'UserEventIncludeFromUserEventRecursive4'


class UserEventArgsFromUserEventRecursive4(TypedDict, total=False):
    """Arguments for UserEvent"""
    
    

class FindManyUserEventArgsFromUserEvent(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive1'


class FindManyUserEventArgsFromUserEventRecursive1(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive2'


class FindManyUserEventArgsFromUserEventRecursive2(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive3'


class FindManyUserEventArgsFromUserEventRecursive3(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    include: 'UserEventIncludeFromUserEventRecursive4'


class FindManyUserEventArgsFromUserEventRecursive4(TypedDict, total=False):
    """Arguments for UserEvent"""
    take: int
    skip: int
    order_by: Union['UserEventOrderByInput', List['UserEventOrderByInput']]
    where: 'UserEventWhereInput'
    cursor: 'UserEventWhereUniqueInput'
    distinct: List['UserEventScalarFieldKeys']
    


FindManyUserEventArgs = FindManyUserEventArgsFromUserEvent
FindFirstUserEventArgs = FindManyUserEventArgsFromUserEvent


    

class UserEventWhereInput(TypedDict, total=False):
    """UserEvent arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    eventId: Union[_str, 'types.StringFilter']
    starredAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    event: 'EventRelationFilter'

    # should be noted that AND and NOT should be Union['UserEventWhereInputRecursive1', List['UserEventWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserEventWhereInputRecursive1']
    OR: List['UserEventWhereInputRecursive1']
    NOT: List['UserEventWhereInputRecursive1']


class UserEventWhereInputRecursive1(TypedDict, total=False):
    """UserEvent arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    eventId: Union[_str, 'types.StringFilter']
    starredAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    event: 'EventRelationFilter'

    # should be noted that AND and NOT should be Union['UserEventWhereInputRecursive2', List['UserEventWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserEventWhereInputRecursive2']
    OR: List['UserEventWhereInputRecursive2']
    NOT: List['UserEventWhereInputRecursive2']


class UserEventWhereInputRecursive2(TypedDict, total=False):
    """UserEvent arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    eventId: Union[_str, 'types.StringFilter']
    starredAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    event: 'EventRelationFilter'

    # should be noted that AND and NOT should be Union['UserEventWhereInputRecursive3', List['UserEventWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserEventWhereInputRecursive3']
    OR: List['UserEventWhereInputRecursive3']
    NOT: List['UserEventWhereInputRecursive3']


class UserEventWhereInputRecursive3(TypedDict, total=False):
    """UserEvent arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    eventId: Union[_str, 'types.StringFilter']
    starredAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    event: 'EventRelationFilter'

    # should be noted that AND and NOT should be Union['UserEventWhereInputRecursive4', List['UserEventWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserEventWhereInputRecursive4']
    OR: List['UserEventWhereInputRecursive4']
    NOT: List['UserEventWhereInputRecursive4']


class UserEventWhereInputRecursive4(TypedDict, total=False):
    """UserEvent arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    eventId: Union[_str, 'types.StringFilter']
    starredAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    event: 'EventRelationFilter'



# aggregate UserEvent types


    

class UserEventScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UserEvent arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    eventId: Union[_str, 'types.StringWithAggregatesFilter']
    starredAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserEventScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserEventScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserEventScalarWhereWithAggregatesInputRecursive1']


class UserEventScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UserEvent arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    eventId: Union[_str, 'types.StringWithAggregatesFilter']
    starredAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserEventScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserEventScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserEventScalarWhereWithAggregatesInputRecursive2']


class UserEventScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UserEvent arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    eventId: Union[_str, 'types.StringWithAggregatesFilter']
    starredAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserEventScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserEventScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserEventScalarWhereWithAggregatesInputRecursive3']


class UserEventScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UserEvent arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    eventId: Union[_str, 'types.StringWithAggregatesFilter']
    starredAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserEventScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserEventScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserEventScalarWhereWithAggregatesInputRecursive4']


class UserEventScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UserEvent arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    eventId: Union[_str, 'types.StringWithAggregatesFilter']
    starredAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserEventGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    eventId: _str
    starredAt: datetime.datetime
    _sum: 'UserEventSumAggregateOutput'
    _avg: 'UserEventAvgAggregateOutput'
    _min: 'UserEventMinAggregateOutput'
    _max: 'UserEventMaxAggregateOutput'
    _count: 'UserEventCountAggregateOutput'


class UserEventAvgAggregateOutput(TypedDict, total=False):
    """UserEvent output for aggregating averages"""


class UserEventSumAggregateOutput(TypedDict, total=False):
    """UserEvent output for aggregating sums"""


class UserEventScalarAggregateOutput(TypedDict, total=False):
    """UserEvent output including scalar fields"""
    id: _str
    userId: _str
    eventId: _str
    starredAt: datetime.datetime


UserEventMinAggregateOutput = UserEventScalarAggregateOutput
UserEventMaxAggregateOutput = UserEventScalarAggregateOutput


class UserEventMaxAggregateInput(TypedDict, total=False):
    """UserEvent input for aggregating by max"""
    id: bool
    userId: bool
    eventId: bool
    starredAt: bool


class UserEventMinAggregateInput(TypedDict, total=False):
    """UserEvent input for aggregating by min"""
    id: bool
    userId: bool
    eventId: bool
    starredAt: bool


class UserEventNumberAggregateInput(TypedDict, total=False):
    """UserEvent input for aggregating numbers"""


UserEventAvgAggregateInput = UserEventNumberAggregateInput
UserEventSumAggregateInput = UserEventNumberAggregateInput


UserEventCountAggregateInput = TypedDict(
    'UserEventCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'eventId': bool,
        'starredAt': bool,
        '_all': bool,
    },
    total=False,
)

UserEventCountAggregateOutput = TypedDict(
    'UserEventCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'eventId': int,
        'starredAt': int,
        '_all': int,
    },
    total=False,
)


UserEventKeys = Literal[
    'id',
    'userId',
    'eventId',
    'starredAt',
    'user',
    'event',
]
UserEventScalarFieldKeys = Literal[
    'id',
    'userId',
    'eventId',
    'starredAt',
]
UserEventScalarFieldKeysT = TypeVar('UserEventScalarFieldKeysT', bound=UserEventScalarFieldKeys)

UserEventRelationalFieldKeys = Literal[
        'user',
        'event',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields