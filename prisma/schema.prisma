generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  role          String      @default("user")
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id            String   @id @default(cuid())
  externalId    String?  @unique
  name          String
  description   String   @default("")
  startDate     DateTime
  endDate       DateTime
  locationText  String   @default("TBD")
  communityText String   @default("Unknown")
  url           String?
  hasCLE        Boolean  @default(false)
  cleCredits    Float?
  status        String   @default("APPROVED")
  
  // Re-added categorization fields
  category      String[] @default([])
  tags          String[] @default([])
  eventType     String?
  
  // Additional useful fields
  image         String?
  price         Json?
  metadata      Json?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Simplified - removed complex relations

model NewsletterSubscriber {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  isActive       Boolean   @default(true)
  preferences    Json?
  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Newsletter {
  id          String           @id @default(cuid())
  title       String
  subject     String
  content     String
  status      NewsletterStatus @default(DRAFT)
  createdBy   String
  createdAt   DateTime         @default(now())
  scheduledAt DateTime?
  sentAt      DateTime?
  recipients  Int?
  opens       Int?
  clicks      Int?
  metadata    Json?
}

// Removed EventStatus enum - using simple strings

enum NewsletterStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
}
