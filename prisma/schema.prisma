// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This Prisma schema is for NextAuth.js with a user role field
// Docs: https://authjs.dev/reference/adapter/prisma#schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  // output   = "../src/generated/prisma" // removed for default output
}



datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  role          String   @default("user") // 'user' or 'admin'
  accounts      Account[]
  sessions      Session[]
  starredEvents UserEvent[] // Many-to-many relationship with events
  // Add any other fields you want
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires   DateTime

  @@unique([identifier, token])
}

enum EventStatus {
  PENDING
  APPROVED
  DENIED
  FEATURED
  CANCELLED
  ARCHIVED
}

model Event {
  id          String      @id @default(cuid())
  externalId  String?     @unique
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  locationName String
  url         String?     @unique
  cleCredits  Float?      // Changed from Int? to Float? to match our scrapers
  status      EventStatus @default(PENDING)
  submittedBy String      // Email of the submitter
  submittedAt DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  updatedBy   String?     // Email of the last updater
  notes       String?     // For admin notes/reason for status changes
  locationId  String?     // Optional reference to a Location
  location    Location?   @relation(fields: [locationId], references: [id])
  communityId String?     // Optional reference to a Community
  community   Community?  @relation(fields: [communityId], references: [id])
  starredBy   UserEvent[] // Many-to-many relationship with users
  wordpressId String?     // WordPress post ID for integration
  
  // New fields for categorization system
  category    String[]    // Array of categories (e.g., ['CLE', 'Intellectual Property', 'Networking'])
  tags        String[]    // Array of tags for additional metadata
  eventType   String?     // Type of event (e.g., 'CLE', 'Networking', 'Annual Dinner', 'Pro Bono')
  image       String?     // URL to event image
  price       Json?       // Price information as JSON (for complex pricing structures)
  metadata    Json?       // Additional metadata as JSON
}

model Location {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  zip         String
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Community {
  id          String   @id @default(cuid())
  name        String
  description String?
  url         String?  // Website URL for the community
  category    String[] // Array of categories/tags
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Junction table for user starred events
model UserEvent {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  starredAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId]) // Prevent duplicate starrings
}

// Newsletter subscription model
model NewsletterSubscriber {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  isActive      Boolean  @default(true)
  preferences   Json?    // Store subscription preferences (categories, frequency, etc.)
  subscribedAt  DateTime @default(now())
  unsubscribedAt DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Newsletter campaigns model
model Newsletter {
  id          String          @id @default(cuid())
  title       String
  subject     String
  content     String          // HTML content
  status      NewsletterStatus @default(DRAFT)
  createdBy   String          // Email of creator
  createdAt   DateTime        @default(now())
  scheduledAt DateTime?       // When to send
  sentAt      DateTime?       // When it was actually sent
  recipients  Int?            // Number of recipients
  opens       Int?            // Number of opens
  clicks      Int?            // Number of clicks
  metadata    Json?           // Additional metadata
}

enum NewsletterStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
}
